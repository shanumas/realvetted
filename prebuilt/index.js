import Fe from"express";import yt from"express";import{createServer as ur}from"http";import{pgTable as Q,text as E,serial as ee,integer as $,boolean as re,timestamp as z,json as ke}from"drizzle-orm/pg-core";import{createInsertSchema as te}from"drizzle-zod";import{z as T}from"zod";var Y=Q("users",{id:ee("id").primaryKey(),email:E("email").notNull().unique(),password:E("password").notNull(),firstName:E("first_name"),lastName:E("last_name"),phone:E("phone"),role:E("role").notNull(),profileStatus:E("profile_status").notNull().default("pending"),addressLine1:E("address_line1"),addressLine2:E("address_line2"),city:E("city"),state:E("state"),zip:E("zip"),dateOfBirth:E("date_of_birth"),createdAt:z("created_at").defaultNow(),idFrontUrl:E("id_front_url"),idBackUrl:E("id_back_url"),profilePhotoUrl:E("profile_photo_url"),licenseNumber:E("license_number"),brokerageName:E("brokerage_name"),isBlocked:re("is_blocked").default(!1),verificationMethod:E("verification_method"),prequalificationDocUrl:E("prequalification_doc_url"),prequalificationValidated:re("prequalification_validated").default(!1),prequalificationData:ke("prequalification_data"),prequalificationMessage:E("prequalification_message"),manualApprovalRequested:re("manual_approval_requested").default(!1),prequalificationAttempts:$("prequalification_attempts").default(0),failedPrequalificationUrls:E("failed_prequalification_urls").array()}),I=Q("properties",{id:ee("id").primaryKey(),address:E("address").notNull(),city:E("city"),state:E("state"),zip:E("zip"),price:$("price"),bedrooms:$("bedrooms"),bathrooms:$("bathrooms"),squareFeet:$("square_feet"),propertyType:E("property_type"),yearBuilt:$("year_built"),description:E("description"),createdAt:z("created_at").defaultNow(),createdBy:$("created_by").notNull(),sellerEmail:E("seller_email"),sellerId:$("seller_id"),agentId:$("agent_id"),status:E("status").notNull().default("active"),sellerName:E("seller_name"),sellerPhone:E("seller_phone"),sellerCompany:E("seller_company"),sellerLicenseNo:E("seller_license_no"),propertyUrl:E("property_url"),sourceUrl:E("source_url"),sourceSite:E("source_site"),listingAgentName:E("listing_agent_name"),listingAgentEmail:E("listing_agent_email"),listingAgentPhone:E("listing_agent_phone"),listingAgentCompany:E("listing_agent_company"),listingAgentLicenseNo:E("listing_agent_license_no"),features:E("features").array(),imageUrls:E("image_urls").array(),emailSent:re("email_sent").default(!1)}),q=Q("messages",{id:ee("id").primaryKey(),propertyId:$("property_id").notNull(),senderId:$("sender_id").notNull(),receiverId:$("receiver_id").notNull(),content:E("content").notNull(),timestamp:z("timestamp").defaultNow(),isRead:re("is_read").default(!1)}),H=Q("support_messages",{id:ee("id").primaryKey(),sessionId:E("session_id").notNull(),senderId:$("sender_id"),senderName:E("sender_name").notNull(),senderEmail:E("sender_email"),content:E("content").notNull(),timestamp:z("timestamp").defaultNow(),isRead:re("is_read").default(!1),isAdmin:re("is_admin").default(!1)}),Ur=te(H).omit({id:!0,timestamp:!0}),K=Q("agent_leads",{id:ee("id").primaryKey(),propertyId:$("property_id").notNull(),agentId:$("agent_id").notNull(),status:E("status").notNull().default("available"),createdAt:z("created_at").defaultNow()}),ue=Q("property_activity_logs",{id:ee("id").primaryKey(),propertyId:$("property_id").notNull(),userId:$("user_id"),activity:E("activity").notNull(),timestamp:z("timestamp").defaultNow(),details:ke("details")}),D=Q("agreements",{id:ee("id").primaryKey(),propertyId:$("property_id"),agentId:$("agent_id").notNull(),buyerId:$("buyer_id").notNull(),type:E("type").notNull().default("standard"),agreementText:E("agreement_text").notNull(),agentSignature:E("agent_signature"),buyerSignature:E("buyer_signature"),sellerSignature:E("seller_signature"),date:z("date").notNull(),status:E("status").notNull().default("pending_buyer"),createdAt:z("created_at").defaultNow(),documentUrl:E("document_url"),editedPdfContent:E("edited_pdf_content"),isGlobal:re("is_global").default(!1)}),C=Q("viewing_requests",{id:ee("id").primaryKey(),propertyId:$("property_id").notNull(),buyerId:$("buyer_id").notNull(),buyerAgentId:$("buyer_agent_id"),sellerAgentId:$("seller_agent_id"),requestedDate:z("requested_date").notNull(),requestedEndDate:z("requested_end_date").notNull(),confirmedDate:z("confirmed_date"),confirmedEndDate:z("confirmed_end_date"),status:E("status").notNull().default("pending"),notes:E("notes"),confirmedById:$("confirmed_by_id"),responseMessage:E("response_message"),createdAt:z("created_at").defaultNow(),updatedAt:z("updated_at").defaultNow()}),Tr=te(Y).omit({id:!0,createdAt:!0}),Dr=T.object({email:T.string().email(),password:T.string().min(6),role:T.enum(["buyer","seller","agent","admin"])}),$r=T.object({email:T.string().email(),password:T.string().min(6),role:T.enum(["buyer","seller","agent","admin"]),firstName:T.string().optional(),lastName:T.string().optional(),profilePhotoUrl:T.string().optional(),licenseNumber:T.string().optional()}).superRefine((i,s)=>{}),qe=T.object({firstName:T.string(),lastName:T.string(),dateOfBirth:T.string(),addressLine1:T.string(),addressLine2:T.string().optional(),city:T.string(),state:T.string(),zip:T.string(),idFrontUrl:T.string().optional(),idBackUrl:T.string().optional()}),Ce=te(I).omit({id:!0,createdAt:!0}),jr=te(q).omit({id:!0,timestamp:!0}),Fr=te(K).omit({id:!0,createdAt:!0}),Lr=te(ue).omit({id:!0,timestamp:!0}),kr=te(D).omit({id:!0,createdAt:!0}),qr=te(C).omit({id:!0,createdAt:!0,updatedAt:!0}).extend({requestedDate:T.string().transform(i=>new Date(i)),requestedEndDate:T.string().transform(i=>new Date(i)),override:T.boolean().optional()}),Cr=T.object({file:T.any().refine(i=>(i==null?void 0:i.size)!==void 0,{message:"File is required"}).refine(i=>(i==null?void 0:i.size)<=1024*1024,{message:"File size must be less than 1MB"}),verificationMethod:T.literal("prequalification")}),O=Q("emails",{id:ee("id").primaryKey(),externalId:E("external_id"),to:E("to").array().notNull(),cc:E("cc").array(),subject:E("subject").notNull(),body:E("body").notNull(),status:E("status").notNull().default("sent"),errorMessage:E("error_message"),timestamp:z("timestamp").defaultNow(),sentById:$("sent_by_id").notNull(),sentByRole:E("sent_by_role").notNull(),relatedEntityType:E("related_entity_type").notNull(),relatedEntityId:$("related_entity_id").notNull()}),Mr=te(O).omit({id:!0,timestamp:!0}),X=Q("viewing_tokens",{id:ee("id").primaryKey(),token:E("token").notNull().unique(),viewingRequestId:$("viewing_request_id").notNull(),expiresAt:z("expires_at").notNull(),active:re("active").default(!0),createdAt:z("created_at").defaultNow(),lastAccessedAt:z("last_accessed_at")}),Vr=te(X).omit({id:!0,createdAt:!0,lastAccessedAt:!0});import{randomBytes as Rt}from"crypto";import{scrypt as xt}from"crypto";import{promisify as Bt}from"util";import Ut from"pg";import{drizzle as Tt}from"drizzle-orm/node-postgres";import{eq as N,and as ce,or as Me,desc as se}from"drizzle-orm";import Dt from"express-session";import $t from"connect-pg-simple";var jt=Bt(xt),Ft=$t(Dt),Re=class{db;pool;sessionStore;constructor(){this.pool=new Ut.Pool({connectionString:process.env.DATABASE_URL}),this.db=Tt(this.pool),this.sessionStore=new Ft({pool:this.pool,createTableIfMissing:!0}),this.initializeAdminUser()}async initializeAdminUser(){try{if((await this.db.select().from(Y).where(N(Y.role,"admin")).limit(1)).length===0){let n="Kuttybuski123*",u=Rt(16).toString("hex"),f=`${(await jt(n,u,64)).toString("hex")}.${u}`;await this.createUser({email:"admin@admin.com",password:f,firstName:"Admin",lastName:"User",role:"admin",profileStatus:"verified"})}}catch(s){console.error("Error initializing admin user:",s)}}async getUser(s){return(await this.db.select().from(Y).where(N(Y.id,s)))[0]}async getUserByEmail(s){return(await this.db.select().from(Y).where(N(Y.email,s.toLowerCase())))[0]}async getUsersByRole(s){return await this.db.select().from(Y).where(N(Y.role,s))}async getAllUsers(){return await this.db.select().from(Y)}async createUser(s){return(await this.db.insert(Y).values({email:s.email.toLowerCase(),password:s.password,firstName:s.firstName||null,lastName:s.lastName||null,phone:s.phone||null,role:s.role,profileStatus:s.profileStatus||"pending",addressLine1:s.addressLine1||null,addressLine2:s.addressLine2||null,city:s.city||null,state:s.state||null,zip:s.zip||null,dateOfBirth:s.dateOfBirth||null,createdAt:new Date,idFrontUrl:s.idFrontUrl||null,idBackUrl:s.idBackUrl||null,isBlocked:!1}).returning())[0]}async updateUser(s,n){let u=await this.db.update(Y).set(n).where(N(Y.id,s)).returning();if(u.length===0)throw new Error(`User with ID ${s} not found`);return u[0]}async getProperty(s){try{return(await this.db.select({id:I.id,address:I.address,city:I.city,state:I.state,zip:I.zip,price:I.price,bedrooms:I.bedrooms,bathrooms:I.bathrooms,squareFeet:I.squareFeet,propertyType:I.propertyType,yearBuilt:I.yearBuilt,description:I.description,createdAt:I.createdAt,createdBy:I.createdBy,sellerEmail:I.sellerEmail,sellerId:I.sellerId,agentId:I.agentId,status:I.status,sellerName:I.sellerName,sellerPhone:I.sellerPhone,sellerCompany:I.sellerCompany,sellerLicenseNo:I.sellerLicenseNo,propertyUrl:I.propertyUrl,features:I.features,imageUrls:I.imageUrls,emailSent:I.emailSent,listingAgentEmail:I.listingAgentEmail,listingAgentName:I.listingAgentName,listingAgentPhone:I.listingAgentPhone,listingAgentCompany:I.listingAgentCompany,listingAgentLicenseNo:I.listingAgentLicenseNo}).from(I).where(N(I.id,s)))[0]}catch(n){return console.error("Error in getProperty:",n),(await this.pool.query(`
        SELECT id, address, city, state, zip, price, bedrooms, bathrooms, 
               square_feet as "squareFeet", property_type as "propertyType", 
               year_built as "yearBuilt", description, created_at as "createdAt", 
               created_by as "createdBy", seller_email as "sellerEmail", 
               seller_id as "sellerId", agent_id as "agentId", status, 
               seller_name as "sellerName", seller_phone as "sellerPhone", 
               seller_company as "sellerCompany", seller_license_no as "sellerLicenseNo", 
               property_url as "propertyUrl", features, image_urls as "imageUrls", 
               email_sent as "emailSent" 
        FROM properties 
        WHERE id = $1
      `,[s])).rows[0]}}async getPropertyWithParticipants(s){let n=await this.getProperty(s);if(!n)return;let u=n.createdBy,g=n.sellerId,f=n.agentId,m=u?await this.getUser(u):void 0,P=g?await this.getUser(g):void 0,r=f?await this.getUser(f):void 0;return{...n,buyer:m,seller:P,agent:r}}async getAllProperties(){try{return await this.pool.query(`
        ALTER TABLE properties 
        ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE
      `),await this.db.select().from(I)}catch(s){return console.error("Error in getAllProperties:",s),(await this.pool.query("SELECT * FROM properties")).rows}}async getPropertiesByBuyer(s){try{return await this.db.select({id:I.id,address:I.address,city:I.city,state:I.state,zip:I.zip,price:I.price,bedrooms:I.bedrooms,bathrooms:I.bathrooms,squareFeet:I.squareFeet,propertyType:I.propertyType,yearBuilt:I.yearBuilt,description:I.description,createdAt:I.createdAt,createdBy:I.createdBy,sellerEmail:I.sellerEmail,sellerId:I.sellerId,agentId:I.agentId,status:I.status,sellerName:I.sellerName,sellerPhone:I.sellerPhone,sellerCompany:I.sellerCompany,sellerLicenseNo:I.sellerLicenseNo,propertyUrl:I.propertyUrl,features:I.features,imageUrls:I.imageUrls,emailSent:I.emailSent}).from(I).where(N(I.createdBy,s))}catch(n){return console.error("Error in getPropertiesByBuyer:",n),(await this.pool.query(`
        SELECT id, address, city, state, zip, price, bedrooms, bathrooms, 
               square_feet as "squareFeet", property_type as "propertyType", 
               year_built as "yearBuilt", description, created_at as "createdAt", 
               created_by as "createdBy", seller_email as "sellerEmail", 
               seller_id as "sellerId", agent_id as "agentId", status, 
               seller_name as "sellerName", seller_phone as "sellerPhone", 
               seller_company as "sellerCompany", seller_license_no as "sellerLicenseNo", 
               property_url as "propertyUrl", features, image_urls as "imageUrls", 
               email_sent as "emailSent" 
        FROM properties 
        WHERE created_by = $1
      `,[s])).rows}}async getPropertiesBySeller(s){try{return await this.pool.query(`
        ALTER TABLE properties 
        ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE
      `),await this.db.select().from(I).where(N(I.sellerId,s))}catch(n){return console.error("Error in getPropertiesBySeller:",n),(await this.pool.query("SELECT * FROM properties WHERE seller_id = $1",[s])).rows}}async getPropertiesByAgent(s){try{return await this.pool.query(`
        ALTER TABLE properties 
        ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE
      `),await this.db.select().from(I).where(N(I.agentId,s))}catch(n){return console.error("Error in getPropertiesByAgent:",n),(await this.pool.query("SELECT * FROM properties WHERE agent_id = $1",[s])).rows}}async createProperty(s){try{let n={address:s.address,city:s.city||null,state:s.state||null,zip:s.zip||null,price:s.price||null,bedrooms:s.bedrooms||null,bathrooms:s.bathrooms||null,squareFeet:s.squareFeet||null,propertyType:s.propertyType||null,yearBuilt:s.yearBuilt||null,description:s.description||null,createdAt:new Date,createdBy:s.createdBy,sellerEmail:s.sellerEmail||null,sellerId:s.sellerId||null,agentId:s.agentId||null,status:s.status||"active",sellerName:s.sellerName||null,sellerPhone:s.sellerPhone||null,sellerCompany:s.sellerCompany||null,sellerLicenseNo:s.sellerLicenseNo||null,propertyUrl:s.propertyUrl||null,features:s.features||null,imageUrls:s.imageUrls||null,emailSent:s.emailSent||!1};return"sourceUrl"in s&&(n.source_url=s.sourceUrl),"sourceSite"in s&&(n.source_site=s.sourceSite),"listingAgentName"in s&&(n.listing_agent_name=s.listingAgentName),"listingAgentEmail"in s&&(n.listing_agent_email=s.listingAgentEmail),"listingAgentPhone"in s&&(n.listing_agent_phone=s.listingAgentPhone),"listingAgentCompany"in s&&(n.listing_agent_company=s.listingAgentCompany),"listingAgentLicenseNo"in s&&(n.listing_agent_license_no=s.listingAgentLicenseNo),(await this.pool.query(`
        INSERT INTO properties (
          address, city, state, zip, price, bedrooms, bathrooms, 
          square_feet, property_type, year_built, description, 
          created_at, created_by, seller_email, seller_id, agent_id, 
          status, seller_name, seller_phone, seller_company, 
          seller_license_no, property_url, features, image_urls, 
          email_sent
          ${n.source_url?", source_url":""}
          ${n.source_site?", source_site":""}
          ${n.listing_agent_name?", listing_agent_name":""}
          ${n.listing_agent_email?", listing_agent_email":""}
          ${n.listing_agent_phone?", listing_agent_phone":""}
          ${n.listing_agent_company?", listing_agent_company":""}
          ${n.listing_agent_license_no?", listing_agent_license_no":""}
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, 
          $17, $18, $19, $20, $21, $22, $23, $24, $25
          ${n.source_url?", $26":""}
          ${n.source_site?", $"+(26+(n.source_url?1:0)):""}
          ${n.listing_agent_name?", $"+(26+(n.source_url?1:0)+(n.source_site?1:0)):""}
          ${n.listing_agent_email?", $"+(26+(n.source_url?1:0)+(n.source_site?1:0)+(n.listing_agent_name?1:0)):""}
          ${n.listing_agent_phone?", $"+(26+(n.source_url?1:0)+(n.source_site?1:0)+(n.listing_agent_name?1:0)+(n.listing_agent_email?1:0)):""}
          ${n.listing_agent_company?", $"+(26+(n.source_url?1:0)+(n.source_site?1:0)+(n.listing_agent_name?1:0)+(n.listing_agent_email?1:0)+(n.listing_agent_phone?1:0)):""}
          ${n.listing_agent_license_no?", $"+(26+(n.source_url?1:0)+(n.source_site?1:0)+(n.listing_agent_name?1:0)+(n.listing_agent_email?1:0)+(n.listing_agent_phone?1:0)+(n.listing_agent_company?1:0)):""}
        ) RETURNING *
      `,[n.address,n.city,n.state,n.zip,n.price,n.bedrooms,n.bathrooms,n.squareFeet,n.propertyType,n.yearBuilt,n.description,n.createdAt,n.createdBy,n.sellerEmail,n.sellerId,n.agentId,n.status,n.sellerName,n.sellerPhone,n.sellerCompany,n.sellerLicenseNo,n.propertyUrl,n.features,n.imageUrls,n.emailSent,...n.source_url?[n.source_url]:[],...n.source_site?[n.source_site]:[],...n.listing_agent_name?[n.listing_agent_name]:[],...n.listing_agent_email?[n.listing_agent_email]:[],...n.listing_agent_phone?[n.listing_agent_phone]:[],...n.listing_agent_company?[n.listing_agent_company]:[],...n.listing_agent_license_no?[n.listing_agent_license_no]:[]])).rows[0]}catch(n){return console.error("Error creating property:",n),(await this.db.insert(I).values({address:s.address,city:s.city||null,state:s.state||null,zip:s.zip||null,price:s.price||null,bedrooms:s.bedrooms||null,bathrooms:s.bathrooms||null,squareFeet:s.squareFeet||null,propertyType:s.propertyType||null,yearBuilt:s.yearBuilt||null,description:s.description||null,createdAt:new Date,createdBy:s.createdBy,sellerEmail:s.sellerEmail||null,sellerId:s.sellerId||null,agentId:s.agentId||null,status:s.status||"active",emailSent:s.emailSent||!1}).returning())[0]}}async updateProperty(s,n){try{"emailSent"in n&&await this.pool.query(`
          ALTER TABLE properties 
          ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE
        `);let u=await this.db.update(I).set(n).where(N(I.id,s)).returning();if(u.length===0)throw new Error(`Property with ID ${s} not found`);return u[0]}catch(u){if(console.error("Error updating property:",u),!await this.getProperty(s))throw new Error(`Property with ID ${s} not found`);for(let[f,m]of Object.entries(n))if(f==="emailSent")try{await this.pool.query(`
              UPDATE properties SET email_sent = $1 WHERE id = $2
            `,[m,s])}catch(P){console.error("Error updating emailSent:",P),await this.pool.query(`
              ALTER TABLE properties 
              ADD COLUMN IF NOT EXISTS email_sent BOOLEAN DEFAULT FALSE
            `),await this.pool.query(`
              UPDATE properties SET email_sent = $1 WHERE id = $2
            `,[m,s])}else{let P=f.replace(/([A-Z])/g,"_$1").toLowerCase();await this.pool.query(`
            UPDATE properties SET ${P} = $1 WHERE id = $2
          `,[m,s])}return await this.getProperty(s)}}async deleteProperty(s){if(!await this.getProperty(s))throw new Error(`Property with ID ${s} not found`);await this.db.delete(K).where(N(K.propertyId,s)),await this.db.delete(q).where(N(q.propertyId,s)),await this.db.delete(I).where(N(I.id,s))}async getMessage(s){return(await this.db.select().from(q).where(N(q.id,s)))[0]}async getMessagesByProperty(s,n=!1){return n?await this.db.select().from(q).orderBy(q.timestamp):await this.db.select().from(q).where(N(q.propertyId,s)).orderBy(q.timestamp)}async getMessagesBetweenUsers(s,n,u){return await this.db.select().from(q).where(ce(N(q.propertyId,s),Me(ce(N(q.senderId,n),N(q.receiverId,u)),ce(N(q.senderId,u),N(q.receiverId,n))))).orderBy(q.timestamp)}async createMessage(s){return(await this.db.insert(q).values({propertyId:s.propertyId,senderId:s.senderId,receiverId:s.receiverId,content:s.content,timestamp:new Date,isRead:!1}).returning())[0]}async markMessageAsRead(s){let n=await this.db.update(q).set({isRead:!0}).where(N(q.id,s)).returning();if(n.length===0)throw new Error(`Message with ID ${s} not found`);return n[0]}async getAgentLead(s){return(await this.db.select().from(K).where(N(K.id,s)))[0]}async getAvailableLeadsByAgent(s){let n=await this.db.select().from(K).where(ce(N(K.agentId,s),N(K.status,"available"))),u=[];for(let g of n){let f=await this.getProperty(g.propertyId);f&&u.push({lead:{id:g.id,propertyId:g.propertyId,agentId:g.agentId,status:g.status,createdAt:g.createdAt||new Date},property:f})}return u}async createAgentLead(s){return(await this.db.insert(K).values({propertyId:s.propertyId,agentId:s.agentId,status:s.status||"available",createdAt:new Date}).returning())[0]}async updateAgentLead(s,n){let u=await this.db.update(K).set(n).where(N(K.id,s)).returning();if(u.length===0)throw new Error(`Agent lead with ID ${s} not found`);return u[0]}async getPropertyActivityLogs(s){let n=await this.db.select().from(ue).where(N(ue.propertyId,s)).orderBy(ue.timestamp,"desc"),u=[];for(let g of n){let f;if(g.userId){let m=await this.getUser(g.userId);m&&(f={firstName:m.firstName,lastName:m.lastName,email:m.email,role:m.role})}u.push({...g,user:f})}return u}async createPropertyActivityLog(s){return(await this.db.insert(ue).values({propertyId:s.propertyId,userId:s.userId||null,activity:s.activity,timestamp:new Date,details:s.details||{}}).returning())[0]}async getAgreement(s){return(await this.db.select().from(D).where(N(D.id,s)))[0]}async getAgreementsByProperty(s){let n=await this.db.select().from(D).where(N(D.propertyId,s)).orderBy(D.createdAt,"desc"),u=new Map;return n.forEach(g=>{var f;(!u.has(g.type)||new Date(g.createdAt||0)>new Date(((f=u.get(g.type))==null?void 0:f.createdAt)||0))&&u.set(g.type,g)}),Array.from(u.values()).sort((g,f)=>new Date(f.createdAt||0).getTime()-new Date(g.createdAt||0).getTime())}async getAgreementsByAgent(s){let n=await this.db.select({agreement:D,property:I}).from(D).leftJoin(I,N(D.propertyId,I.id)).where(N(D.agentId,s)).orderBy(D.createdAt,"desc"),u=new Map;return n.forEach(g=>{let f=`${g.agreement.propertyId}_${g.agreement.type}`;(!u.has(f)||new Date(g.agreement.createdAt||0)>new Date(u.get(f).agreement.createdAt||0))&&u.set(f,g)}),Array.from(u.values()).map(g=>({...g.agreement,property:g.property})).sort((g,f)=>new Date(f.createdAt||0).getTime()-new Date(g.createdAt||0).getTime())}async getAgreementsByType(s){return await this.db.select().from(D).where(N(D.type,s)).orderBy(D.createdAt,"desc")}async getAgreementsByBuyer(s){let n=await this.db.select({agreement:D,property:{id:I.id,address:I.address,city:I.city,state:I.state,zip:I.zip,price:I.price,bedrooms:I.bedrooms,bathrooms:I.bathrooms,squareFeet:I.squareFeet,propertyType:I.propertyType,yearBuilt:I.yearBuilt,description:I.description,createdAt:I.createdAt,createdBy:I.createdBy,sellerEmail:I.sellerEmail,sellerId:I.sellerId,agentId:I.agentId,status:I.status,sellerName:I.sellerName,sellerPhone:I.sellerPhone,sellerCompany:I.sellerCompany,sellerLicenseNo:I.sellerLicenseNo,propertyUrl:I.propertyUrl,features:I.features,imageUrls:I.imageUrls,emailSent:I.emailSent}}).from(D).leftJoin(I,N(D.propertyId,I.id)).where(N(D.buyerId,s)).orderBy(D.createdAt,"desc"),u=new Map;return n.forEach(g=>{let f=g.agreement.propertyId?`${g.agreement.propertyId}_${g.agreement.type}`:`global_${g.agreement.type}_${g.agreement.agentId}`;(!u.has(f)||new Date(g.agreement.createdAt||0)>new Date(u.get(f).agreement.createdAt||0))&&u.set(f,g)}),Array.from(u.values()).map(g=>({...g.agreement,property:g.property})).sort((g,f)=>new Date(f.createdAt||0).getTime()-new Date(g.createdAt||0).getTime())}async getGlobalBRBCForBuyerAgent(s,n){return(await this.db.select().from(D).where(ce(N(D.buyerId,s),N(D.agentId,n),N(D.isGlobal,!0),N(D.type,"global_brbc"))).orderBy(se(D.createdAt)).limit(1))[0]}async createAgreement(s){return(await this.db.insert(D).values({propertyId:s.propertyId,agentId:s.agentId,buyerId:s.buyerId,type:s.type||"standard",agreementText:s.agreementText,agentSignature:s.agentSignature,buyerSignature:s.buyerSignature||null,sellerSignature:s.sellerSignature||null,date:s.date,status:s.status||"pending_buyer",createdAt:new Date,documentUrl:s.documentUrl,editedPdfContent:s.editedPdfContent,isGlobal:s.isGlobal||!1}).returning())[0]}async updateAgreement(s,n){let u=await this.db.update(D).set(n).where(N(D.id,s)).returning();if(u.length===0)throw new Error(`Agreement with ID ${s} not found`);return u[0]}async getViewingRequest(s){return(await this.db.select().from(C).where(N(C.id,s)))[0]}async getViewingRequestWithParticipants(s){let n=await this.getViewingRequest(s);if(!n)return;let u=await this.getProperty(n.propertyId),g=await this.getUser(n.buyerId),f=n.buyerAgentId?await this.getUser(n.buyerAgentId):void 0;return{...n,property:u,buyer:g,agent:f}}async getViewingRequestsByProperty(s,n=!1){return n?await this.db.select().from(C).orderBy(se(C.requestedDate)):await this.db.select().from(C).where(N(C.propertyId,s)).orderBy(se(C.requestedDate))}async getViewingRequestsByBuyer(s){return await this.db.select().from(C).where(N(C.buyerId,s)).orderBy(se(C.requestedDate))}async getViewingRequestsByAgent(s){return await this.db.select().from(C).where(Me(N(C.buyerAgentId,s),N(C.sellerAgentId,s))).orderBy(se(C.requestedDate))}async createViewingRequest(s){return(await this.db.insert(C).values({propertyId:s.propertyId,buyerId:s.buyerId,buyerAgentId:s.buyerAgentId||null,sellerAgentId:s.sellerAgentId||null,requestedDate:s.requestedDate,requestedEndDate:s.requestedEndDate,status:s.status||"pending",notes:s.notes||null,createdAt:new Date}).returning())[0]}async updateViewingRequest(s,n){let u=await this.db.update(C).set(n).where(N(C.id,s)).returning();if(u.length===0)throw new Error(`Tour request with ID ${s} not found`);return u[0]}async deleteViewingRequest(s){if(!await this.getViewingRequest(s))throw new Error(`Tour request with ID ${s} not found`);await this.db.delete(C).where(N(C.id,s))}async createEmail(s){return(await this.db.insert(O).values(s).returning())[0]}async getEmail(s){return(await this.db.select().from(O).where(N(O.id,s)))[0]}async getAllEmails(){return await this.db.select().from(O).orderBy(se(O.timestamp))}async getEmailsByUser(s){return await this.db.select().from(O).where(N(O.sentById,s)).orderBy(se(O.timestamp))}async getEmailsByRole(s){return await this.db.select().from(O).where(N(O.sentByRole,s)).orderBy(se(O.timestamp))}async getEmailsByRelatedEntity(s,n){return await this.db.select().from(O).where(ce(N(O.relatedEntityType,s),N(O.relatedEntityId,n))).orderBy(se(O.timestamp))}async updateEmailStatus(s,n,u){let g=await this.db.update(O).set({status:n,errorMessage:u||null}).where(N(O.id,s)).returning();if(g.length===0)throw new Error(`Email with ID ${s} not found`);return g[0]}async createViewingToken(s){return(await this.db.insert(X).values({token:s.token,viewingRequestId:s.viewingRequestId,expiresAt:s.expiresAt,active:s.active??!0,createdAt:new Date}).returning())[0]}async getViewingTokenByToken(s){return(await this.db.select().from(X).where(N(X.token,s)))[0]}async getViewingTokensByRequestId(s){return await this.db.select().from(X).where(N(X.viewingRequestId,s))}async updateViewingToken(s,n){let u=await this.db.update(X).set({...n,id:void 0,token:void 0,viewingRequestId:void 0,createdAt:void 0}).where(N(X.id,s)).returning();if(u.length===0)throw new Error(`Viewing token with ID ${s} not found`);return u[0]}async invalidateViewingToken(s){let n=await this.db.update(X).set({active:!1,lastAccessedAt:new Date}).where(N(X.token,s)).returning();if(n.length===0)throw new Error(`Viewing token '${s}' not found`);return n[0]}async getSupportMessage(s){return(await this.db.select().from(H).where(N(H.id,s)))[0]}async getSupportMessagesBySession(s){return await this.db.select().from(H).where(N(H.sessionId,s)).orderBy(H.timestamp)}async createSupportMessage(s){return(await this.db.insert(H).values(s).returning())[0]}async markSupportMessageAsRead(s){let n=await this.db.update(H).set({isRead:!0}).where(N(H.id,s)).returning();if(n.length===0)throw new Error(`Support message with ID ${s} not found`);return n[0]}async getUnreadSupportMessageCount(){var n;let s=await this.db.select({count:this.db.fn.count(H.id)}).from(H).where(ce(N(H.isRead,!1),N(H.isAdmin,!1)));return Number((n=s[0])==null?void 0:n.count)||0}async getActiveSupportSessions(){return(await this.pool.query(`
      SELECT 
        session_id as "sessionId", 
        MAX(timestamp) as "lastMessage",
        SUM(CASE WHEN is_read = false AND is_admin = false THEN 1 ELSE 0 END) as "unreadCount"
      FROM support_messages 
      GROUP BY session_id
      ORDER BY MAX(timestamp) DESC
    `)).rows}},d=new Re;import ge from"passport";import{Strategy as Lt}from"passport-local";import kt from"express-session";import{scrypt as qt,randomBytes as Ct,timingSafeEqual as Mt}from"crypto";import{promisify as Vt}from"util";var Ve=Vt(qt);async function Ot(i){let s=Ct(16).toString("hex");return`${(await Ve(i,s,64)).toString("hex")}.${s}`}async function zt(i,s){let[n,u]=s.split("."),g=Buffer.from(n,"hex"),f=await Ve(i,u,64);return Mt(g,f)}function Oe(i){let s={secret:process.env.SESSION_SECRET||"propertymatch-secret-key",resave:!1,saveUninitialized:!1,store:d.sessionStore,cookie:{secure:process.env.NODE_ENV==="production",httpOnly:!0,sameSite:"lax",maxAge:6048e5}};i.set("trust proxy",1),i.use(kt(s)),i.use(ge.initialize()),i.use(ge.session()),ge.use(new Lt({usernameField:"email",passwordField:"password"},async(g,f,m)=>{try{let P=await d.getUserByEmail(g);return P?P.isBlocked?m(null,!1,{message:"Your account has been blocked. Please contact an administrator."}):await zt(f,P.password)?m(null,P):m(null,!1,{message:"Invalid email or password"}):m(null,!1,{message:"Invalid email or password"})}catch(P){return m(P)}})),ge.serializeUser((g,f)=>{f(null,g.id)}),ge.deserializeUser(async(g,f)=>{try{let m=await d.getUser(g);m&&m.dateOfBirth&&typeof m.dateOfBirth=="string"&&(m.dateOfBirth=new Date(m.dateOfBirth)),f(null,m)}catch(m){f(m)}});let n=(g,f,m)=>{if(g.isAuthenticated())return m();f.status(401).json({success:!1,error:"Not authenticated"})},u=g=>(f,m,P)=>{if(!f.isAuthenticated())return m.status(401).json({success:!1,error:"Not authenticated"});if(!g.includes(f.user.role))return m.status(403).json({success:!1,error:"Insufficient permissions"});P()};return i.post("/api/auth/register",async(g,f,m)=>{try{if(await d.getUserByEmail(g.body.email))return f.status(400).json({success:!1,error:"Email already in use"});let r=await Ot(g.body.password),t=await d.createUser({...g.body,password:r});g.login(t,e=>{if(e)return m(e);let{password:a,...o}=t,l=t.role==="agent"?"/agent/referral-agreement":null;f.status(201).json({...o,redirectUrl:l})})}catch(P){console.error("Registration error:",P),f.status(500).json({success:!1,error:"Registration failed"})}}),i.post("/api/auth/login",(g,f,m)=>{ge.authenticate("local",(P,r,t)=>{if(P)return m(P);if(!r)return f.status(401).json({success:!1,error:(t==null?void 0:t.message)||"Invalid credentials"});if(g.body.role&&r.role!==g.body.role)return f.status(401).json({success:!1,error:`Invalid login. This account is registered as a ${r.role}, not a ${g.body.role}.`});g.login(r,e=>{if(e)return m(e);let{password:a,...o}=r;f.json(o)})})(g,f,m)}),i.post("/api/auth/logout",(g,f)=>{let m=g.session.id;g.logout(P=>{if(P)return f.status(500).json({success:!1,error:"Logout failed"});g.session.regenerate(r=>{r&&console.error("Error regenerating session:",r),m&&d.sessionStore&&d.sessionStore.destroy(m,t=>{t&&console.error("Error destroying session:",t)}),f.clearCookie("connect.sid"),f.json({success:!0})})})}),i.get("/api/auth/user",(g,f)=>{if(!g.isAuthenticated())return f.status(401).json({success:!1,error:"Not authenticated"});let{password:m,...P}=g.user;f.json(P)}),{isAuthenticated:n,hasRole:u}}import{WebSocketServer as Wt,WebSocket as Ie}from"ws";function ze(i,s){let n=new Wt({server:i,path:"/ws"}),u=new Map;n.on("connection",r=>{console.log("New WebSocket connection established"),u.set(r,{socket:r,lastPing:Date.now()}),r.on("message",async t=>{var e;try{let a=JSON.parse(t.toString()),o=u.get(r);switch(a.type){case"message":await g(a.data,o);break;case"support":if(s){let l=await s(a.data,o);l&&(P({type:"support",data:l}),r.send(JSON.stringify({type:"support",data:l})))}break;case"ping":o&&(o.lastPing=Date.now(),r.send(JSON.stringify({type:"pong",data:{}})));break;case"auth":o&&((e=a.data)!=null&&e.userId)&&(o.userId=a.data.userId,console.log(`Client authenticated: User ID ${a.data.userId}`),r.send(JSON.stringify({type:"notification",data:{message:"Authentication successful"}})));break;default:console.log(`Unknown message type: ${a.type}`)}}catch(a){console.error("Error processing WebSocket message:",a)}}),r.on("close",()=>{console.log("WebSocket connection closed"),u.delete(r)})}),setInterval(()=>{let r=Date.now();u.forEach((t,e)=>{if(r-t.lastPing>6e4){console.log("Closing inactive connection"),e.terminate(),u.delete(e);return}e.readyState===Ie.OPEN&&e.send(JSON.stringify({type:"ping",data:{}}))})},3e4);async function g(r,t){try{if(!r.propertyId||!r.senderId||!r.receiverId||!r.content)return;if(t!=null&&t.userId&&t.userId!==r.senderId){console.log(`User ID mismatch: ${t.userId} vs ${r.senderId}`);return}let e=await d.createMessage({propertyId:r.propertyId,senderId:r.senderId,receiverId:r.receiverId,content:r.content}),a={id:e.id,propertyId:e.propertyId,senderId:e.senderId,senderName:r.senderName||"User",receiverId:e.receiverId,content:e.content,timestamp:e.timestamp||new Date().toISOString()};f([r.senderId,r.receiverId],{type:"message",data:a})}catch(e){console.error("Error handling chat message:",e)}}function f(r,t){let e=JSON.stringify(t);u.forEach(a=>{a.userId&&r.includes(a.userId)&&a.socket.readyState===Ie.OPEN&&a.socket.send(e)})}function m(r){let t=JSON.stringify(r);u.forEach(e=>{e.socket.readyState===Ie.OPEN&&e.socket.send(t)})}async function P(r){let t=JSON.stringify(r),a=(await d.getUsersByRole("admin")).map(o=>o.id);u.forEach(o=>{o.userId&&a.includes(o.userId)&&o.socket.readyState===Ie.OPEN&&o.socket.send(t)})}return{broadcastToUsers:f,broadcast:m,broadcastToAdmins:P}}import Gt from"openai";import Kt from"fs";import Yt from"pdf-parse";import Ht from"fs";async function We(i){try{let s;typeof i=="string"?s=Ht.readFileSync(i):s=i;try{return(await Yt(s)).text}catch(n){return console.error("PDF parsing error:",n),s.toString("utf-8").replace(/[\x00-\x09\x0B\x0C\x0E-\x1F\x7F]/g," ").substring(0,1e3)}}catch(s){return console.error("Error processing PDF:",s),""}}var Jt=new Gt({apiKey:process.env.OPENAI_API_KEY});async function Ye(i,s){try{if(!process.env.OPENAI_API_KEY||process.env.OPENAI_API_KEY==="dummy_key_for_development")return console.log("No OpenAI API key provided, returning empty validation"),{validated:!1,data:{},message:"API key is missing. Manual validation required."};let n;if(i&&Kt.existsSync(i)?(console.log("Extracting text from PDF file:",i),n=await We(i)):n=i,!n||n.trim().length<50)return{validated:!1,data:{},message:"Could not extract sufficient text from document. Please upload a text-based PDF."};let u=`
      Analyze the following mortgage pre-qualification letter text. 
      Is this a valid mortgage pre-qualification/pre-approval document?
      
      Extract the following information:
      1. Document Type (Pre-qualification or Pre-approval)
      2. Buyer's full name
      3. First name
      4. Last name
      5. Lender's name
      6. Loan amount
      7. Loan type (conventional, FHA, VA, etc.)
      8. Approval date (when the letter was issued)
      9. Expiration date (if mentioned)
      
      Text:
      ${n}
      
      Return as a JSON object with these fields plus a "isValidDocument" boolean field.
      Format names with proper capitalization.
    `,f=(await Jt.chat.completions.create({model:"gpt-4o",messages:[{role:"system",content:"You are a specialized validation system for mortgage pre-qualification documents."},{role:"user",content:u}],response_format:{type:"json_object"}})).choices[0].message.content;if(!f)throw new Error("Empty response from OpenAI");let m=JSON.parse(f),P={documentType:m.documentType||null,buyerName:m.buyerName||null,firstName:m.firstName||null,lastName:m.lastName||null,lenderName:m.lenderName||null,loanAmount:m.loanAmount||null,loanType:m.loanType||null,approvalDate:m.approvalDate||null,expirationDate:m.expirationDate||null},r=m.isValidDocument===!0;return{validated:r,data:P,message:r?"Document successfully validated as a pre-qualification letter.":"Document does not appear to be a valid pre-qualification letter."}}catch(n){return console.error("Error validating pre-qualification document:",n),{validated:!1,data:{},message:"Error processing document. Please try a different file format."}}}async function He(i,s){return s.filter(u=>u.role==="agent")}import sr from"openai";import Ke from"puppeteer-extra";import Zt from"puppeteer-extra-plugin-stealth";import Xt from"openai";import Qt from"axios";async function Je(i,s){Ke.use(Zt());let n=await tr();try{console.log("\u{1F310} Extracting property data from Description:",s);let u;if(s?u=await er(s):(console.log("Description is empty"),u=Ge),console.log("Complete data "+JSON.stringify(u)),u.propertyUrl=i,s){let{email:g,phone:f}=await rr(s);g?u.listingAgentEmail=g:u.listingAgentEmail=process.env.LISTING_AGENT_FALLBACK??"shanumas@gmail.com",f?u.listingAgentPhone=f:u.listingAgentPhone=process.env.LISTING_AGENT_FALLBACK_PHONE??"(828) 678-0070",console.log("-----Extracted Email: "+g)}return console.log("Complete data "+JSON.stringify(u)),u}catch(u){return console.error("\u274C extractPropertyWithPuppeteer failed:",u),{...Ge,propertyUrl:i}}finally{await n.close()}}async function er(i){var m,P;let s=new Xt({apiKey:process.env.OPENAI_API_KEY}),n=`
You are a real estate data extractor. Extract the listing agent details from this HTML content inside a <main> tag.

Extract the following fields as JSON:
- address
- price - Total asking (sale) price, never monthly cost.
- bedrooms
- bathrooms
- listingAgentName
- listingAgentPhone
- listingAgentLicenseNo
- listingAgentCompany

If a field is missing, return it as an empty string.

HTML:
"""${i}"""
`,u=await s.chat.completions.create({model:"gpt-4o-mini",messages:[{role:"user",content:n}],temperature:.2}),g=((m=u.choices[0].message.content)==null?void 0:m.indexOf("{"))??-1,f=(P=u.choices[0].message.content)==null?void 0:P.slice(g);console.log("Return string from openai: "+f);try{let r=f==null?void 0:f.match(/{[\s\S]+}/),t=r?r[0]:"{}",e=JSON.parse(t);return console.log("Parsed data: "+e),e}catch{return{address:"",price:"",bedrooms:"",bathrooms:"",listingAgentName:"",listingAgentPhone:""}}}var Ge={address:"Address unavailable",bedrooms:"",bathrooms:"",price:"",description:"",listingAgentName:"",listingAgentPhone:"",listingAgentEmail:"",listingAgentCompany:"",listingAgentLicenseNo:"",propertyUrl:""};async function tr(){return Ke.launch({headless:!0,executablePath:"/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium",args:["--no-sandbox","--disable-setuid-sandbox","--disable-dev-shm-usage","--disable-gpu","--disable-web-security","--disable-features=IsolateOrigins","--disable-automation","--disable-blink-features=AutomationControlled","--window-size=1920,1080","--start-maximized","--disable-extensions","--hide-scrollbars","--mute-audio",`--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${Math.floor(Math.random()*5)+120}.0.0.0 Safari/537.36`],ignoreDefaultArgs:["--enable-automation"],defaultViewport:null})}async function rr(i){var s;try{let n=(((s=i.match(/Listed by\s*([\s\S]*?)(?=Listed by|$)/i))==null?void 0:s[1])||"").trim();console.log("------\u{1F50D} Searching for agent email in:",n);let u=`${n} realtor email`,f=(await Qt.get("https://serpapi.com/search.json",{params:{q:u,api_key:process.env.SERPAPI_KEY,engine:"google",num:2}})).data.organic_results||[];console.log("------\u{1F50D} Search results from email search query:",JSON.stringify(f));let m="";for(let P of f.slice(0,2))try{let r=P.snippet||"";console.log("\u{1F50D} Searching for email in: "+r);let t=r.match(/[\w.+-]+@[\w.-]+\.\w{2,}/),e=r.match(/(?:\+?1\s*[-.\s]?)?(?:\(?\d{3}\)?[-.\s]?)\d{3}[-.\s]?\d{4}/);if(e&&(m=e[0]),t)return{email:t[0],phone:m}}catch(r){console.warn(`\u274C Failed to fetch or parse ${P.link}:`,r)}return{email:"",phone:m}}catch(n){return console.error("\u{1F534} SerpAPI email lookup failed:",n),{email:"",phone:""}}}import J from"lodash";import{getJson as Ze}from"serpapi";var Xe=process.env.SERPAPI_KEY;async function et(i){let s=i;i.includes("zillow.com")||(s=Qe(i),console.log("Address to search: "+s));try{let n="zillow "+s;console.log("Zillow search query:",n);let f=((await Ze({engine:"google",q:n,api_key:Xe,num:2})).organic_results||[]).find(c=>{let p=c.link||"";return console.log("-------Zillow serpapi result: "+JSON.stringify(c)),p.includes("zillow.com")}),m=Qe(f.link),P=f.snippet,r="redfin.com",e=["site:redfin.com",'intext:"Listed by"',`${m}`].filter(Boolean).join(" ").trim();console.log(`Using SerpAPI to find ${r} URL for: ${m}`);let a=await Ze({engine:"google",q:e,api_key:Xe,num:5});console.log("SerpAPI search result:",a);let l=(a.organic_results||[]).find(c=>{let p=c.link||"";return console.log("-------Current link: "+c),p.includes(r)});if(l){console.log(`Found ${r} URL: ${JSON.stringify(l.snippet)}`);let c=l.snippet,p=P+" , "+c;return console.log("--------------------------Combined description: "+p),p}else return console.log(`No matching ${r} URL found in search results`),null}catch(n){return console.error("Error in SerpAPI search:",n),null}}function Qe(i){return i.split("/").find(n=>/^\d/.test(n)).replace(/[_-]/g," ").replace(/\b\w/g,n=>n.toUpperCase()).replace(/\s([A-Z]{2})\s(\d{5})$/,", $1 $2")}function ar(i){let s=J.cloneDeep(i);return["bedrooms","bathrooms","squareFeet","yearBuilt","price"].forEach(u=>{let g=J.get(s,u);if(J.isEmpty(g)&&!J.isNumber(g)){J.set(s,u,null);return}if(!J.isNumber(g)&&J.isString(g)){let f;if(u==="price"||u==="squareFeet")f=g.replace(/[^0-9.]/g,"");else if(u==="bathrooms"){if(g.includes("/")){let m=g.match(/(\d+)[\s\-]*(\d+)\/(\d+)/);if(m){let P=parseInt(m[1]),r=parseInt(m[2]),t=parseInt(m[3]);if(t>0){let e=P+r/t;J.set(s,u,e);return}}}else if(g.includes("bath")&&g.includes("half")){let m=g.match(/(\d+)bath(\d+)half/i);if(m){let P=parseInt(m[1]),r=parseInt(m[2]),t=P+r*.5;J.set(s,u,t);return}}f=g.replace(/[^0-9.]/g,"")}else f=g.replace(/[^0-9]/g,"");if(f){let m=parseFloat(f);isNaN(m)?J.set(s,u,null):J.set(s,u,m)}else J.set(s,u,null)}}),s}var Gs=new sr({apiKey:process.env.OPENAI_API_KEY});async function xe(i){if(!i)throw new Error("URL is required");if(!i.match(/^https?:\/\//i))throw new Error("Invalid URL format. Please provide a complete URL starting with http:// or https://");console.log(`Extracting property data from URL: ${i}`);try{console.log(`Using SerpAPI to find a Realtor.com URL for: ${i}`);try{let s=await et(i);if(s){console.log(`\u2705 Start extraction from description: ${s}`);try{let n=await Je(i,s);return n=ar(n),{...n}}catch(n){console.error("Extraction from Realtor.com URL failed:",n),console.log("Falling back to original URL extraction")}}else console.log("No Realtor.com URL found via SerpAPI, proceeding with direct extraction")}catch(s){console.error("SerpAPI step failed:",s),console.log("Proceeding with direct URL extraction")}throw new Error("No extraction strategy succeeded")}catch(s){return console.error("Error in property URL extraction:",s),{address:"Address could not be extracted",bedrooms:null,bathrooms:null,price:null,description:"Property information could not be extracted",listingAgentName:"",listingAgentPhone:"",listingAgentEmail:"",listingAgentCompany:"",listingAgentLicenseNo:"",propertyUrl:i}}}import fe from"@emailjs/nodejs";fe.init({publicKey:process.env.E_PUBLIC,privateKey:process.env.E_PRIVATE});var pe=[];async function tt(i,s,n){console.log("--------Lets send brbc to buyer: Inside the sending function :");let u=[i.email],g=`${i.firstName||""} ${i.lastName||""}`.trim()||i.email,f=n?`${n.firstName||""} ${n.lastName||""}`.trim():"your agent",m="Your Signed Buyer Representation Agreement",P=`
Dear ${g},

Thank you for signing your Buyer Representation Agreement with REALVetted. This document establishes your official relationship with ${f}.

We've attached a copy of your signed agreement for your records. Please save this document for future reference.

Key Points to Remember:
- This agreement is valid for 90 days
- Your agent will represent your interests in the home buying process
- All property viewings and inquiries should be coordinated through your agent

If you have any questions about this agreement or need assistance with your property search, please contact us at support@realvetted.com.

Thank you for choosing REALVetted for your real estate needs.

Best regards,
The REALVetted Team
`;console.log(`
======= SIGNED BRBC EMAIL TO BUYER =======
TO: ${u.join(", ")}
SUBJECT: ${m}
DOCUMENT: ${s}
======= END EMAIL =======
  `);try{console.log("--------Lets send brbc to buyer: Inside the sending function 1:",s);let e=s;if(!s.startsWith("http")){console.log("--------Lets send brbc to buyer: Inside the sending function 2:",s);let o=process.env.PUBLIC_URL||"https://realvetted.replit.app",l=s.replace(/^\/+/,"");e=`${o}/${l}`}console.log("--------Full documet URL:",e);let a=await fe.send("service_z8eslzt","template_viismmd",{buyer_name:g,buyer_email:u.join(", "),brbc:e});console.log("BRBC document email sent successfully:",a)}catch(e){console.error("Error sending BRBC document email with EmailJS:",e)}let r=Ue(),t={id:r,to:u,cc:[],subject:m,body:P,timestamp:new Date,sentBy:{id:i.id,role:"buyer"},relatedEntity:{type:"agreement",id:i.id}};try{await d.createEmail({externalId:r,to:u,cc:[],subject:m,body:P,status:"sent",sentById:i.id,sentByRole:"buyer",relatedEntityType:"agreement",relatedEntityId:i.id})}catch(e){console.error("Error storing BRBC email in database:",e)}return pe.push(t),t}async function rt(i,s,n,u,g,f,m){let P=new Date(i.requestedDate),r=new Date(i.requestedEndDate),t={weekday:"long",year:"numeric",month:"long",day:"numeric"},e={hour:"2-digit",minute:"2-digit",hour12:!0},a=P.toLocaleDateString("en-US",t),o=P.toLocaleTimeString("en-US",e),l=r.toLocaleTimeString("en-US",e),c=`${a} at ${o}`,p=n.verificationMethod==="kyc"&&n.profileStatus==="verified",h=n.verificationMethod==="prequalification"&&n.prequalificationValidated,w=p?"For your assurance, the buyer has been fully vetted through a Know Your Customer (KYC) verification process.":h?"For your assurance, the buyer has provided a verified pre-qualification document from a lender.":"The buyer's verification is pending. Please exercise caution.",y=[g],b=u?[u.email]:[];console.log(`
======= TOUR REQUEST EMAIL NOTIFICATION =======
TO: ${y.join(", ")}
CC: ${b.join(", ")}
SUBJECT: ""
BODY: ""
======= END EMAIL =======
  `);let A=n.prequalificationDocUrl||"",v=process.env.PUBLIC_URL||"https://realvetted.replit.app",S=A.replace(/^\/+/,""),R=`${v}/${S}`;console.log(`Full Prequal URL: ${R}`);let x=`prequal.${R.split(".").pop()}`;try{let F=await fe.send("service_z8eslzt","template_4bptn9b",{to_email:y.join(", "),cc_email:b.join(", "),prequal:{uri:R,name:x},buyer_name:n.firstName+" "+n.lastName,buyer_phone:n.phone,buyer_email:n.email,property_address:s.address,requested_date_time:c,listing_agent_name:f||"Listing Agent",calenderLink:m});fullBrbcUrl?console.log(`Sent tour request email with BRBC document: ${fullBrbcUrl}`):console.log("No BRBC document included in tour request email"),console.log("Email sent successfully:",F)}catch(F){console.error("Error sending email with EmailJS:",F)}let B=`email_${new Date().getTime()}_${Math.random().toString(36).substring(2,10)}`,k={id:B,to:y,cc:b,subject:"Property Tour Request",body:"Tour request notification for property",timestamp:new Date,sentBy:{id:n.id,role:"buyer"},relatedEntity:{type:"viewing_request",id:i.id}};try{await d.createEmail({externalId:B,to:y,cc:b,subject:"Property Tour Request",body:"Tour request notification for property",status:"sent",sentById:n.id,sentByRole:"buyer",relatedEntityType:"viewing_request",relatedEntityId:i.id})}catch(F){console.error("Error storing email in database:",F)}return pe.push(k),k}async function st(i,s){try{return await d.getEmailsByRelatedEntity(i,s)}catch(n){return console.error("Error getting emails from database:",n),pe.filter(g=>g.relatedEntity.type===i&&g.relatedEntity.id===s).map(Be)}}async function at(i){try{return await d.getEmailsByUser(i)}catch(s){return console.error("Error getting emails from database:",s),pe.filter(u=>u.sentBy.id===i).map(Be)}}async function nt(){try{return await d.getAllEmails()}catch(i){return console.error("Error getting all emails from database:",i),pe.map(Be)}}function Be(i){return{id:0,externalId:i.id,to:i.to,cc:i.cc,subject:i.subject,body:i.body,status:"sent",errorMessage:null,timestamp:i.timestamp,sentById:i.sentBy.id,sentByRole:i.sentBy.role,relatedEntityType:i.relatedEntity.type,relatedEntityId:i.relatedEntity.id}}function Ue(){return`email_${new Date().getTime()}_${Math.random().toString(36).substring(2,10)}`}async function ot(i,s,n,u){let g=["shanumas@gmail.com"],f=`Pre-qualification Approval Request - ${i.firstName} ${i.lastName}`,m=`
Dear Admin,

A buyer has requested manual approval for their pre-qualification document.

Buyer Details:
- Name: ${i.firstName} ${i.lastName}
- Email: ${i.email}
- Phone: ${i.phone||"Not provided"}
- Address: ${i.addressLine1||"Not provided"}${i.city&&i.state?`, ${i.city}, ${i.state}`:""}

The buyer has uploaded a pre-qualification document that requires manual verification.
Main Document URL: ${s}
`;n&&(m+=`
--- Additional Financial Information ---
- Desired Loan Amount: ${n.desiredLoanAmount||"Not provided"}
- Monthly Income: ${n.monthlyIncome||"Not provided"}
- Employment Status: ${n.employmentStatus||"Not provided"}
- Credit Score Range: ${n.creditScore||"Not provided"}
- Down Payment Amount: ${n.downPaymentAmount||"Not provided"}

Additional Notes:
${n.additionalNotes||"None provided"}
`),u&&u.length>0&&(m+=`
--- Supporting Documents ---
The buyer has provided ${u.length} supporting document(s):
`,u.forEach((t,e)=>{m+=`
Document ${e+1}: ${t}`})),m+=`

Please review the document(s) and update the user's verification status accordingly.

Thank you,
REALVetted - Real Estate, Verified and Simplified
`,console.log(`
======= PRE-QUALIFICATION APPROVAL REQUEST EMAIL =======
TO: ${g.join(", ")}
SUBJECT: ${f}
BODY:
${m}
======= END EMAIL =======
  `);try{let t=m,e=await fe.send("service_z8eslzt","template_4bptn9b",{to_email:g.join(", "),cc_email:"",from_name:"REALVetted Prequalification Service",subject:f,message:t,brbc_document:"",prequalification_document:s||""});console.log("Prequalification email sent successfully:",e)}catch(t){console.error("Error sending prequalification email with EmailJS:",t)}let P=Ue(),r={id:P,to:g,cc:[],subject:f,body:m,timestamp:new Date,sentBy:{id:i.id,role:"buyer"},relatedEntity:{type:"agreement",id:i.id}};try{await d.createEmail({externalId:P,to:g,cc:[],subject:f,body:m,status:"sent",sentById:i.id,sentByRole:"buyer",relatedEntityType:"agreement",relatedEntityId:i.id})}catch(t){console.error("Error storing email in database:",t)}return pe.push(r),r}async function it(i,s,n,u){let g="shanumas@gmail.com",f=`New Customer Support Chat - ${i}`,m=`
Dear Admin,

A new customer support chat has been initiated:

Customer: ${i}
Email: ${s}
Session ID: ${u}
Time: ${new Date().toLocaleString()}

First message:
"${n}"

Please log in to the admin dashboard to respond to this customer.
Support chat URL: https://realvetted.com/admin/support/${u}

Thank you,
REALVetted Support System
  `;console.log(`
======= SUPPORT CHAT NOTIFICATION EMAIL =======
TO: ${g}
SUBJECT: ${f}
BODY:
${m}
======= END EMAIL =======
  `);try{let P=await fe.send("service_z8eslzt","template_4bptn9b",{to_email:g,cc_email:"",from_name:"REALVetted Support System",subject:f,message:m});console.log("Support chat notification email sent successfully:",P);let r=Ue();try{return await d.createEmail({externalId:r,to:[g],cc:[],subject:f,body:m,status:"sent",sentById:0,sentByRole:"system",relatedEntityType:"support_chat",relatedEntityId:0})}catch(t){return console.error("Error storing support chat notification email in database:",t),null}}catch(P){return console.error("Error sending support chat notification email:",P),null}}import nr from"axios";import*as lt from"cheerio";async function ct(i){try{let s=await nr.get(`https://www2.dre.ca.gov/PublicASP/pplinfo.asp?License_id=${i}`,{headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"},timeout:1e4}),n=lt.load(s.data),u="",g="",f="";n("table tr").each((t,e)=>{let a=n(e).text().trim();if(a.includes("Name:")){u=a.replace("Name:","").trim();let o=u.split(" ");o.length>=2&&(g=o[0],f=o.slice(1).join(" "))}});let m="",P="",r="";return n("table tr").each((t,e)=>{let a=n(e).text().trim();a.includes("License Type:")&&(m=a.replace("License Type:","").trim()),a.includes("Expiration Date:")&&(P=a.replace("Expiration Date:","").trim()),a.includes("License Status:")&&(r=a.replace("License Status:","").trim())}),{firstName:g,lastName:f,fullName:u,licenseNumber:i,licenseType:m,expirationDate:P,status:r}}catch(s){return console.error("Error looking up license:",s),{}}}import*as dt from"crypto";var ut="1340b85e-5b2c-4223-8765-fb2f72901afa",or="220dbc0a-8f57-4597-82a2-e70a36708cf6";async function Te(i){try{let s=await fetch("https://stationapi.veriff.com/v1/sessions",{method:"POST",headers:{accept:"application/json","x-auth-client":ut},body:JSON.stringify({verification:{callback:"https://example.com/callback",person:{firstName:i.firstName||"",lastName:i.lastName||"",idNumber:""},vendorData:String(i.id),timestamp:new Date().toISOString()}})});if(!s.ok)throw new Error(`Failed to create Veriff session: ${s.statusText}`);let n=await s.json();return{url:n.verification.url,sessionId:n.verification.id}}catch(s){throw console.error("Error creating Veriff session:",s),s}}async function gt(i){try{console.log("--------Received Veriff webhook data:");let s=parseInt(i.vendorData),n=i.verification.status;if(isNaN(s))throw new Error("Invalid user ID in webhook data");let u=await d.getUser(s);if(!u)throw new Error(`User not found with ID: ${s}`);let g;switch(n){case"success":g="verified";let f=u.prequalificationValidated===!0;await d.updateUser(s,{profileStatus:"verified",verificationMethod:f?"both":"kyc"}),console.log(`User ${s} verified successfully via KYC${f?" and pre-qualification":""}`);return;case"declined":g="rejected";break;case"expired":case"abandoned":g="pending";break;default:g="pending"}console.log(`Updating user ${s} profile status to ${g}`),await d.updateUser(s,{profileStatus:g})}catch(s){throw console.error("Error processing Veriff webhook:",s),s}}async function pt(i){try{console.log(`Checking Veriff session status for ID: ${i}`);let s=dt.createHmac("sha256",or).update(i).digest("hex");try{let u=await(await fetch(`https://stationapi.veriff.com/v1/sessions/${i}/decision/fullauto?version=1.0.0`,{method:"GET",headers:{accept:"application/json","x-auth-client":ut,"x-hmac-signature":s}})).text(),g=JSON.parse(u);if(g&&g.decision){if(console.log(`Verification status: ${g.decision}`),g.decision==="success"&&g.verification&&g.verification.vendorData)try{let f=parseInt(g.verification.vendorData);if(!isNaN(f)){let m=await d.getUser(f);if(!m)throw new Error(`User not found with ID: ${f}`);let P=m.prequalificationValidated===!0;await d.updateUser(f,{profileStatus:"verified",verificationMethod:P?"both":"kyc"}),console.log(`User ${f} verified successfully via KYC${P?" and pre-qualification":""} (from status check)`)}}catch(f){console.error("Error updating user verification method:",f)}return g.decision}else return g.decision||"pending"}catch(n){return console.error("Error fetching from Veriff API:",n),"pending"}}catch(s){return console.error("Error checking Veriff session status:",s),"pending"}}import{randomBytes as ir}from"crypto";function lr(i=32){return ir(i).toString("hex")}async function cr(i,s=7){let n=new Date;n.setDate(n.getDate()+s);let u=lr();return await d.createViewingToken({token:u,viewingRequestId:i,expiresAt:n,active:!0})}async function ye(i){let n=(await d.getViewingTokensByRequestId(i)).find(g=>g.active&&new Date(g.expiresAt)>new Date);if(n)return mt(n.token);let u=await cr(i);return mt(u.token)}function mt(i){return`${process.env.PUBLIC_URL||`${process.env.REPL_SLUG}.replit.dev`}public/viewing-request/${i}`}async function he(i){try{let s=await d.getViewingTokenByToken(i);if(!s)return{isValid:!1,errorMessage:"Invalid or expired token"};if(!s.active)return{isValid:!1,errorMessage:"This link has been deactivated"};if(new Date(s.expiresAt)<new Date)return{isValid:!1,errorMessage:"This link has expired"};let n=await d.getViewingRequest(s.viewingRequestId);if(!n)return{isValid:!1,errorMessage:"The viewing request no longer exists"};let u=await d.getProperty(n.propertyId),g=await d.getUser(n.buyerId),f=n.buyerAgentId?await d.getUser(n.buyerAgentId):void 0;return!u||!g?{isValid:!1,errorMessage:"Related property or buyer information not found"}:(await d.updateViewingToken(s.id,{lastAccessedAt:new Date}),{viewingRequest:n,property:u,buyer:g,agent:f,isValid:!0})}catch(s){return console.error("Error validating viewing token:",s),{isValid:!1,errorMessage:"An error occurred while validating the token"}}}import ht from"multer";import{randomBytes as gr}from"crypto";import{scrypt as pr}from"crypto";import{promisify as mr}from"util";import j from"path";import U from"fs";import{PDFDocument as we,rgb as ia,StandardFonts as la,PDFTextField as me,PDFName as dr}from"pdf-lib";import*as Pe from"fs";import*as Ae from"path";async function W(i,s,n){var u,g;try{let f=await we.load(i),m=s;m.startsWith("data:image/png;base64,")&&(m=m.substring(22));let P=Buffer.from(m,"base64"),r=await f.embedPng(P),e=f.getForm().getFields();console.log("-----------------Form fields:",e.map(o=>o.getName()));for(let o of e)if(o.getName().toLowerCase()===n){let l=((g=(u=o.acroField)==null?void 0:u.getWidgets)==null?void 0:g.call(u))||[];for(let c of l){let p=c.dict.get(dr.of("P")),h=f.getPages().find(y=>y.ref===p),w=c.getRectangle();h&&w&&h.drawImage(r,{x:w.x,y:w.y,width:w.width,height:w.height})}}let a=await f.save();return Buffer.from(a)}catch(f){throw console.error(`Error adding ${n} signature to PDF:`,f),f}}async function ft(i,s,n){try{console.log("replacePlaceholderInPdf called............");let u;try{u=await we.load(i,{ignoreEncryption:!0})}catch(P){throw console.error("Error loading PDF for placeholder replacement:",P),new Error("Cannot load PDF document")}let g=u.getForm();if(!g.getFields().map(P=>P.getName()).includes(s))return console.warn(`Field ${s} not found in PDF .........................................`),i;try{g.getTextField(s).setText(n),console.log(`Successfully replaced field "${s}" with "${n}" using form fields`)}catch{throw console.warn(`No form field with ID "${s}" found. Only updating existing fields as requested.`),new Error(`Text field "${s}" does not exist in the document`)}let m=await u.save();return Buffer.from(m)}catch(u){throw console.error("Error replacing placeholder in PDF: ",u),u}}async function ae(i,s){let n;if(s)console.log("Using existing PDF buffer from database"),n=s;else{console.log("Loading template PDF from file system");let m=Ae.join(process.cwd(),"uploads","pdf","brbc.pdf");try{n=Pe.readFileSync(m)}catch(P){throw console.error("Error reading agency disclosure template PDF:",P),new Error("Could not read agency disclosure template PDF")}}let u=await we.load(n),g=u.getForm();try{let m=new Date,P=`${m.getMonth()+1}/${m.getDate()}/${m.getFullYear()}`,r=new Date(m);r.setDate(m.getDate()+89);let t=`${r.getMonth()+1}/${r.getDate()}/${r.getFullYear()}`,e="";if(i.buyerName1&&(e=i.buyerName1.split(" ").map(a=>a.charAt(0).toUpperCase()).join("")),i.buyerName1)try{g.getTextField("buyer1").setText(i.buyerName1),console.log(`Successfully filled 'buyer1' field with: ${i.buyerName1}`)}catch(a){console.warn("Could not set buyer1 field:",a)}try{g.getTextField("today").setText(P),console.log(`Successfully filled 'today' field with: ${P}`)}catch(a){console.warn("Could not set today field:",a)}try{g.getTextField("3Months").setText(t),console.log(`Successfully filled '3Months' field with: ${t}`)}catch(a){console.warn("Could not set 3Months field:",a)}}catch(m){console.error("Error filling agency disclosure form fields:",m)}if(i.isEditable===!0)console.log("Keeping form fields editable as requested");else try{g.flatten(),console.log("Flattened form fields (non-editable PDF)")}catch(m){console.warn("Could not flatten form fields:",m)}let f=await u.save({updateFieldAppearances:!0});return Buffer.from(f)}async function De(i,s,n){let u;if(n)console.log("Using existing PDF buffer for BRBC"),u=n;else{console.log("Loading BRBC template from file system");let y=Ae.join(process.cwd(),"uploads","pdf","brbc.pdf");try{u=Pe.readFileSync(y)}catch(b){throw console.error("Error reading BRBC template PDF:",b),new Error("Could not read BRBC template PDF")}}let g=await we.load(u),f=g.getForm(),m=new Date,P=h(s==null?void 0:s.startDate)||`${m.getMonth()+1}/${m.getDate()}/${m.getFullYear()}`,r=new Date(m);r.setDate(m.getDate()+90);let t=h(s==null?void 0:s.endDate)||`${r.getMonth()+1}/${r.getDate()}/${r.getFullYear()}`,e=h(s==null?void 0:s.startDate2)||P,a=h(s==null?void 0:s.endDate2)||t,o="";i&&(o=i.split(" ").map(y=>y.charAt(0).toUpperCase()).join(""));let l=(s==null?void 0:s.buyer2)||"",c="";if(l&&(c=l.split(" ").map(y=>y.charAt(0).toUpperCase()).join("")),s!=null&&s.formFieldValues)for(let[y,b]of Object.entries(s.formFieldValues))try{let A=f.getTextField(y);A&&A.setText(b)}catch(A){console.warn(`Could not set custom field ${y}:`,A)}let p=f.getFields();for(let y of p){let b=y.getName();try{b==="buyer1"&&y instanceof me?y.setText(i):b==="buyer2"&&y instanceof me&&l?y.setText(l):b==="today"&&y instanceof me?y.setText(P):b==="3Months"&&y instanceof me?y.setText(t):b==="today2"&&y instanceof me&&l?y.setText(e):b==="3Months2"&&y instanceof me&&l&&y.setText(a)}catch(A){console.warn(`Could not set field ${b}:`,A)}}function h(y){if(!y)return null;try{let b=new Date(y);return isNaN(b.getTime())?null:`${b.getMonth()+1}/${b.getDate()}/${b.getFullYear()}`}catch(b){return console.warn("Error formatting date:",b),null}}let w=await g.save({updateFieldAppearances:!0});return Buffer.from(w)}async function ve(i,s){let n;if(s)console.log("Using existing PDF buffer for agent referral agreement"),n=s;else{console.log("Loading agent referral agreement template from file system");let m=Ae.join(process.cwd(),"uploads","pdf","agent_referral_agreement.pdf");try{n=Pe.readFileSync(m)}catch(P){throw console.error("Error reading agent referral agreement template PDF:",P),new Error("Could not read agent referral agreement template PDF")}}let u=await we.load(n),g=u.getForm();try{if(i.agentName){try{g.getTextField("agent_name").setText(i.agentName)}catch(m){console.warn("Could not set agent_name field:",m)}try{g.getTextField("agent").setText(i.agentName)}catch(m){console.warn("Could not set agent field:",m)}}if(i.licenseNumber)try{g.getTextField("license_number").setText(i.licenseNumber)}catch(m){console.warn("Could not set license_number field:",m)}if(i.brokerageName)try{g.getTextField("firm").setText(i.brokerageName)}catch(m){console.warn("Could not set firm field:",m)}if(i.phoneNumber)try{g.getTextField("agentPhone").setText(i.phoneNumber)}catch(m){console.warn("Could not set agentPhone field:",m)}if(i.email)try{g.getTextField("agentEmail").setText(i.email)}catch(m){console.warn("Could not set agentEmail field:",m)}if(i.address)try{g.getTextField("address").setText(i.address)}catch(m){console.warn("Could not set address field:",m)}if(i.city)try{g.getTextField("city").setText(i.city)}catch(m){console.warn("Could not set city field:",m)}if(i.state)try{g.getTextField("state").setText(i.state)}catch(m){console.warn("Could not set state field:",m)}if(i.zip)try{g.getTextField("zip").setText(i.zip)}catch(m){console.warn("Could not set zip field:",m)}if(i.date){try{g.getTextField("date").setText(i.date)}catch(m){console.warn("Could not set date field:",m)}try{g.getTextField("today").setText(i.date)}catch(m){console.warn("Could not set today field:",m)}}if(i.agentSignature)try{g.getTextField("agentSign").setText(i.agentSignature)}catch(m){console.warn("Could not set agentSign field:",m)}}catch(m){console.error("Error filling agent referral form fields:",m)}if(i.isEditable===!0)console.log("Keeping form fields editable as requested");else try{g.flatten(),console.log("Flattened form fields (non-editable PDF)")}catch(m){console.warn("Could not flatten form fields:",m)}let f=await u.save({updateFieldAppearances:!0});return Buffer.from(f)}import{z as yr}from"zod";var ie=j.join(process.cwd(),"uploads"),Ee=j.join(ie,"pdf"),wt=j.join(ie,"images"),bt=j.join(ie,"id"),It=j.join(ie,"agreements"),Se=j.join(ie,"prequalification");U.existsSync(ie)||U.mkdirSync(ie,{recursive:!0});U.existsSync(Ee)||U.mkdirSync(Ee,{recursive:!0});U.existsSync(wt)||U.mkdirSync(wt,{recursive:!0});U.existsSync(bt)||U.mkdirSync(bt,{recursive:!0});U.existsSync(It)||U.mkdirSync(It,{recursive:!0});U.existsSync(Se)||U.mkdirSync(Se,{recursive:!0});var fr=mr(pr);async function Pt(i){let s=gr(16).toString("hex");return`${(await fr(i,s,64)).toString("hex")}.${s}`}async function hr(i,s){try{if(i.type!=="support")return;if(!i.sessionId||!i.content||!i.senderName){console.error("Invalid support message format:",i);return}let n=await d.createSupportMessage({sessionId:i.sessionId,senderId:i.senderId||null,senderName:i.senderName,senderEmail:i.senderEmail||null,content:i.content,isAdmin:!!i.isAdmin});return i.isAdmin||(await d.getSupportMessagesBySession(i.sessionId)).length<=1&&await it(i.senderName,i.senderEmail||"Anonymous",i.content,i.sessionId),i}catch(n){console.error("Error handling support chat message:",n)}}async function At(i){let s=ur(i),{isAuthenticated:n,hasRole:u}=Oe(i),g=ze(s,hr);i.use("/uploads",yt.static(j.join(process.cwd(),"uploads"))),i.use("/attached_assets",yt.static(j.join(process.cwd(),"attached_assets"))),console.log("Upload directories:"),console.log(" - Uploads dir path:",ie),console.log(" - Prequalification dir path:",Se),i.get("/api/docs/:filename",async(r,t)=>{try{let{filename:e}=r.params,a=r.query.fillable==="true",o=r.query.prefill||"",l=r.query.inline!=="false";if(!["brbc.pdf"].includes(e))return t.status(404).json({success:!1,error:"File not found"});let c=j.join(process.cwd(),"uploads","pdf",e);if(!U.existsSync(c))return t.status(404).json({success:!1,error:"File not found"});let p=U.readFileSync(c);if(e==="brbc.pdf"&&o==="buyer"&&r.user){let h=`${r.user.firstName||""} ${r.user.lastName||""}`.trim()||r.user.email,w=r.user.id;try{let y=`brbc_user_${w}_${Date.now()}`;p=await De(h),console.log(`Prefilled BRBC form for buyer: ${h} (ID: ${w})`)}catch(y){console.error("Error prefilling BRBC form:",y)}}t.setHeader("Content-Type","application/pdf"),l?t.setHeader("Content-Disposition",`inline; filename="${e}"`):t.setHeader("Content-Disposition",`attachment; filename="${e}"`),a&&(t.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),t.setHeader("Pragma","no-cache"),t.setHeader("Expires","0"),t.setHeader("X-PDF-Editable","true")),t.send(p)}catch(e){console.error("Error serving PDF file:",e),t.status(500).json({success:!1,error:"Failed to serve PDF file"})}});let f=ht.memoryStorage(),m=ht({storage:f,limits:{fileSize:5*1024*1024},fileFilter:(r,t,e)=>{t.mimetype.startsWith("image/")||t.mimetype==="application/pdf"?e(null,!0):e(null,!1)}});i.post("/api/buyer/set-manual-approval-requested",n,u(["buyer"]),async(r,t)=>{var e;try{let a=(e=r.user)==null?void 0:e.id;if(!a)return t.status(400).json({error:"User not found"});let{manualApprovalRequested:o}=r.body;return await d.updateUser(a,{manualApprovalRequested:!!o}),t.json({success:!0})}catch(a){return console.error("Error setting manual approval requested status:",a),t.status(500).json({error:"Failed to update manual approval status",details:a.message})}}),i.post("/api/buyer/prequalification-approval",n,u(["buyer"]),m.any(),async(r,t)=>{try{console.log("Received manual approval request");let e=await d.getUser(r.user.id);if(!e)return t.status(404).json({success:!1,error:"User not found"});let a=!!e.prequalificationDocUrl,o=e.prequalificationDocUrl||"";console.log("Form data:",r.body),console.log("Files:",r.files);let l={desiredLoanAmount:r.body.desiredLoanAmount,monthlyIncome:r.body.monthlyIncome,employmentStatus:r.body.employmentStatus,creditScore:r.body.creditScore,downPaymentAmount:r.body.downPaymentAmount,additionalNotes:r.body.additionalNotes},c=r.files,p=[];if(c&&c.length>0){await U.promises.mkdir(j.join(process.cwd(),"uploads","supporting_docs"),{recursive:!0});for(let h of c){let w=`supporting_${r.user.id}_${Date.now()}_${Math.random().toString(36).substring(2,10)}.${h.originalname.split(".").pop()}`,y=j.join(process.cwd(),"uploads","supporting_docs",w);await U.promises.writeFile(y,h.buffer);let b=`/uploads/supporting_docs/${w}`;p.push(b)}}await ot(e,o,l,p),t.json({success:!0,message:"Pre-qualification approval request sent",supportingDocsCount:p.length})}catch(e){console.error("Error requesting pre-qualification approval:",e),t.status(500).json({success:!1,error:"Failed to send pre-qualification approval request"})}}),i.post("/api/buyer/prequalification",n,u(["buyer"]),(r,t,e)=>{console.log("Received prequalification upload request"),console.log("Content-Type:",r.headers["content-type"]),console.log("Request body:",r.body),console.log("Request has files?",!!r.files),e()},m.single("file"),async(r,t)=>{try{if(console.log("After multer middleware"),console.log("req.file:",r.file),console.log("req.body:",r.body),!r.file)return t.status(400).json({success:!1,error:"No file uploaded"});let e=r.file,a=`prequalification_${r.user.id}_${Date.now()}.${e.originalname.split(".").pop()}`,o=j.join(Se,a);U.writeFileSync(o,e.buffer);let l=`/uploads/prequalification/${a}`;try{await d.updateUser(r.user.id,{verificationMethod:"pre-qual",prequalificationDocUrl:l,prequalificationValidated:!1,profileStatus:"pending"}),console.log("User record updated with prequalification info")}catch(p){console.error("Error updating user record:",p)}try{let p=await d.getUser(r.user.id);if(!p)throw new Error("User not found");let h=p.prequalificationAttempts||0;if(h>=3)return t.status(400).json({success:!1,error:"You have exceeded the maximum number of verification attempts (3). Please contact support for assistance."});console.log(`Pre-qualification attempt ${h+1}/3 for user ID ${r.user.id}`);let w=await Ye(o,{firstName:p.firstName,lastName:p.lastName});if(w.validated){let y=p.verificationMethod==="kyc";await d.updateUser(r.user.id,{prequalificationValidated:!0,profileStatus:"verified",verificationMethod:y?"both":"pre-qual",prequalificationData:w.data,prequalificationMessage:w.message,prequalificationAttempts:h+1}),console.log(`User ID ${r.user.id} verified through pre-qualification document.`)}else{let y=p.failedPrequalificationUrls||[];y.push(l),await d.updateUser(r.user.id,{prequalificationValidated:!1,profileStatus:"pending",prequalificationData:w.data,prequalificationMessage:w.message,prequalificationAttempts:h+1,failedPrequalificationUrls:y}),console.log(`User ID ${r.user.id} pre-qualification document failed validation: ${w.message}`)}}catch(p){console.error("Error validating pre-qualification document:",p)}let c=await d.getUser(r.user.id);t.json({success:!0,data:c})}catch(e){console.error("Pre-qualification upload error:",e),t.status(500).json({success:!1,error:"Failed to upload pre-qualification document"})}}),i.post("/api/buyer/verify-identity",n,u(["buyer"]),async(r,t)=>{try{await d.updateUser(r.user.id,{verificationMethod:"kyc"});let e=await Te(r.user);t.json({success:!0,redirectUrl:e.url,sessionId:e.sessionId})}catch(e){console.error("Verification initiation error:",e),t.status(500).json({success:!1,error:"Failed to start verification process"})}}),i.get("/api/agent/license-lookup",async(r,t)=>{try{let{licenseNumber:e}=r.query;if(!e||typeof e!="string")return t.status(400).json({success:!1,error:"License number is required"});let a=await ct(e);t.json({success:!0,data:a})}catch(e){console.error("License lookup error:",e),t.status(500).json({success:!1,error:"Failed to look up license information"})}}),i.post("/api/veriff/create-session",n,async(r,t)=>{try{if(!r.user)return t.status(401).json({success:!1,error:"Unauthorized"});let e=await Te(r.user);t.json({success:!0,url:e.url,sessionId:e.sessionId})}catch(e){console.error("Veriff session creation error:",e),t.status(500).json({success:!1,error:"Failed to create verification session"})}}),i.get("/api/veriff/status/:sessionId",n,async(r,t)=>{try{let{sessionId:e}=r.params;if(!e)return t.status(400).json({success:!1,error:"Session ID is required"});console.log(`Checking verification status for session: ${e}`);try{let a=await pt(e);console.log(`Received verification status: ${a}`),(a==="approved"||a==="success")&&r.user&&(await d.updateUser(r.user.id,{profileStatus:"verified"}),console.log(`User ID ${r.user.id} automatically verified via background check.`)),t.json({success:!0,status:a,decision:a,isVerified:a==="approved"||a==="success"})}catch{console.log("Verification not found or still in progress"),t.json({success:!0,status:"pending",decision:"pending",isVerified:!1,message:"Verification is still in progress or not yet started"})}}catch(e){console.error("Veriff status check error:",e),t.status(500).json({success:!1,error:"Failed to check verification status"})}}),i.post("/api/veriff/webhook",async(r,t)=>{try{let e=r.body;await gt(e),t.status(200).send("Webhook received")}catch(e){console.error("Veriff webhook processing error:",e),t.status(500).json({success:!1,error:"Failed to process webhook"})}}),i.put("/api/users/kyc",n,async(r,t)=>{try{let e=qe.parse(r.body),a=await d.updateUser(r.user.id,{...e,profileStatus:"pending"});if(e.idFrontUrl&&e.idBackUrl)try{let l="",c="";try{let h=async w=>w.startsWith("data:")?w.split(",")[1]:"";if(l=await h(e.idFrontUrl),c=await h(e.idBackUrl),l&&c){let w=await extractIDData(l,c);w&&Object.keys(w).length>0&&(await d.updateUser(r.user.id,{firstName:w.firstName||r.user.firstName,lastName:w.lastName||r.user.lastName,dateOfBirth:w.dateOfBirth?new Date(w.dateOfBirth):r.user.dateOfBirth,addressLine1:w.addressLine1||r.user.addressLine1,addressLine2:w.addressLine2||r.user.addressLine2,city:w.city||r.user.city,state:w.state||r.user.state,zip:w.zip||r.user.zip}),console.log("Updated user profile with extracted ID data:",w))}}catch(h){console.error("Error extracting data from ID documents:",h)}if((await verifyKYCDocuments(r.user.id,e.idFrontUrl,e.idBackUrl,{firstName:e.firstName,lastName:e.lastName,dateOfBirth:e.dateOfBirth,addressLine1:e.addressLine1})).verified&&(await d.updateUser(r.user.id,{profileStatus:"verified"}),r.user.role==="agent"))try{let h=await d.getAllProperties(),w=await d.getUser(r.user.id);if(w&&h.length>0){console.log(`Creating leads for newly verified agent ${w.id} (${w.email})`);let y=h.filter(A=>w.state&&A.state&&w.state.toLowerCase()===A.state.toLowerCase()),b=y.length>0?y.slice(0,3):h.slice(0,3);for(let A of b)await d.createAgentLead({propertyId:A.id,agentId:w.id,status:"available"}),console.log(`Created lead for agent ${w.id} on property ${A.id}`),g&&g.broadcastToUsers([w.id],{type:"notification",data:{message:"New lead available! A property matches your location.",propertyId:A.id}})}}catch(h){console.error("Error creating leads for new agent:",h)}}catch(l){console.error("KYC verification error:",l)}let o=r.user&&r.user.role==="agent"&&a.profileStatus==="verified"?"/agent/referral-agreement":null;t.json({success:!0,data:a,redirectUrl:o})}catch(e){console.error("KYC update error:",e),t.status(400).json({success:!1,error:e instanceof Error?e.message:"Invalid data"})}});function P(r){if(!r)return r;let t=r.match(/(?::|#)\s*([A-Z0-9][\w.-]{4,})\b/i);if(t&&t[1])return t[1];let e=/^(?:DRE\s*#?|CalDRE\s*#?|Lic\.\s*|License\s*#?|BRE\s*#?|CA\s*#?|CalBRE\s*#?|#)\s*/i,a=r.replace(e,"").trim(),o=r.match(/\b([A-Z]\.\d{5,})\b/i);if(o&&o[1])return o[1].replace(".","");let l=a.match(/\((?:[^\)]*?)(?:(?:([A-Z])\.(\d{5,}))|(?:(?:[^\d]*)(\d{5,})))(?:[^\d]*?)\)?/i);if(l){if(l[1]&&l[2])return l[1]+l[2];if(l[3])return l[3]}let c=a.match(/,\s*(?:#?\s*)([A-Z]?[\d]{5,})\b/i);if(c&&c[1])return c[1];let p=/^\s*#?\s*(\d{5,}(?:-\w+)?)\s*(?:\(Active\))?$/i,h=a.match(p);if(h&&h[1])return h[1];let w=r.match(/\b([A-Z]?\d{5,}(?:-\w+)?)\b/i);if(w&&w[1])return w[1];if(a=a.replace(/[^A-Z0-9.-]/gi,""),a.length>10){let y=a.match(/([A-Z]?\d{5,}(?:-\w+)?)/i);if(y&&y[1])return y[1]}return a}return i.post("/api/properties",n,u(["buyer"]),async(r,t)=>{try{r.body.sellerLicenseNo&&(r.body.sellerLicenseNo=P(r.body.sellerLicenseNo)),r.body.listingAgentLicenseNo&&(r.body.listingAgentLicenseNo=P(r.body.listingAgentLicenseNo)),["price","bedrooms","bathrooms","squareFeet","yearBuilt"].forEach(o=>{typeof r.body[o]=="string"&&r.body[o]&&(r.body[o]=Number(r.body[o]))});let e=Ce.parse({...r.body,createdBy:r.user.id}),a=await d.createProperty(e);try{await d.createPropertyActivityLog({propertyId:a.id,userId:r.user.id,activity:"Property created",details:{address:a.address,price:a.price,createdBy:{id:r.user.id,role:r.user.role}}})}catch(o){console.error("Failed to create activity log for property creation, but property was created:",o)}if(a.sellerEmail){let o=await d.getUserByEmail(a.sellerEmail);if(!o){let l="Kuttybuski123*",c=await Pt(l);o=await d.createUser({email:a.sellerEmail,password:c,role:"seller",profileStatus:"verified"}),console.log(`Seller account created: ${a.sellerEmail} with standard password: ${l}`)}await d.updateProperty(a.id,{sellerId:o.id})}try{let o=await He(a);console.log(`Found ${o.length} matching agents for property ${a.id}`);let l=o.slice(0,3);if(l.length>0){let c=l[0];await d.updateProperty(a.id,{agentId:c.id}),await d.createPropertyActivityLog({propertyId:a.id,userId:c.id,activity:"Agent automatically assigned",details:{agentId:c.id,agentEmail:c.email}}),console.log(`Automatically assigned agent ${c.id} to property ${a.id}`),g&&g.broadcastToUsers([r.user.id],{type:"notification",data:{message:`An agent has been automatically assigned to your property at ${a.address}.`,propertyId:a.id}}),g&&g.broadcastToUsers([c.id],{type:"notification",data:{message:"You have been automatically assigned to a new property that matches your expertise.",propertyId:a.id}});for(let p of l){let h=p.id===c.id?"claimed":"available",w=await d.createAgentLead({propertyId:a.id,agentId:p.id,status:h});console.log(`Created lead ${w.id} for agent ${p.id} on property ${a.id} with status ${h}`),p.id!==c.id&&g&&g.broadcastToUsers([p.id],{type:"notification",data:{message:"New lead available! A buyer has added a property that matches your expertise.",propertyId:a.id,leadId:w.id}})}}else console.log(`No matching agents found for property ${a.id}`)}catch(o){console.error("Agent matching error:",o)}t.status(201).json({success:!0,data:a})}catch(e){console.error("Property creation error:",e),t.status(400).json({success:!1,error:e instanceof Error?e.message:"Invalid data"})}}),i.get("/api/properties/by-buyer",n,u(["buyer"]),async(r,t)=>{try{let e=await d.getPropertiesByBuyer(r.user.id);t.json(e)}catch(e){console.error("Get buyer properties error:",e),t.status(500).json({success:!1,error:"Failed to fetch properties"})}}),i.get("/api/properties/by-seller",n,u(["seller"]),async(r,t)=>{try{let e=await d.getPropertiesBySeller(r.user.id);t.json(e)}catch(e){console.error("Get seller properties error:",e),t.status(500).json({success:!1,error:"Failed to fetch properties"})}}),i.get("/api/properties/by-agent",n,u(["agent"]),async(r,t)=>{try{let e=await d.getPropertiesByAgent(r.user.id);t.json(e)}catch(e){console.error("Get agent properties error:",e),t.status(500).json({success:!1,error:"Failed to fetch properties"})}}),i.get("/api/properties/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getPropertyWithParticipants(e);if(!a)return t.status(404).json({success:!1,error:"Property not found"});let o=r.user.id,l=r.user.role;if(!(l==="admin"||l==="buyer"&&a.createdBy===o||l==="seller"&&a.sellerId===o||l==="agent"&&a.agentId===o))return t.status(403).json({success:!1,error:"You don't have access to this property"});t.json(a)}catch(e){console.error("Get property error:",e),t.status(500).json({success:!1,error:"Failed to fetch property"})}}),i.get("/api/test-form-field-replacement",async(r,t)=>{try{let e=await createSimpleReplacementDocument('This is a test document with a form field named "1"',"Form Field Test"),a;try{a=await ft(e,"1","uma"),console.log("Successfully modified the PDF with the replacement")}catch(o){return console.error("Error replacing placeholder:",o),t.status(500).json({success:!1,error:"Failed to replace field in PDF"})}t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",'attachment; filename="test_form_field_replaced.pdf"'),t.send(a)}catch(e){console.error("Error in form field replacement test:",e),t.status(500).json({success:!1,error:"Test failed"})}}),i.post("/api/properties/:id/save-edited-pdf",n,async(r,t)=>{try{console.log("Received request to save edited PDF content");let e=parseInt(r.params.id),{pdfContent:a,viewingRequestId:o}=r.body;if(console.log(`Save PDF request - Property ID: ${e}, PDF content length: ${a?a.length:0}, Viewing Request ID: ${o||"none"}`),!e||!a)return console.log("Missing required parameters"),t.status(400).json({success:!1,error:"Property ID and PDF content are required"});let l=await d.getProperty(e);if(!l)return console.log(`Property ${e} not found`),t.status(404).json({success:!1,error:"Property not found"});let c=r.user.id,p=r.user.role;if(!(p==="admin"||p==="buyer"&&l.createdBy===c||p==="agent"&&l.agentId===c||p==="seller"&&l.sellerId===c))return t.status(403).json({success:!1,error:"You don't have permission to edit agreements for this property"});let y=(await d.getAgreementsByProperty(e)).filter(A=>A.type==="agency_disclosure"),b;if(y.length>0){let A=y[y.length-1];b=await d.updateAgreement(A.id,{editedPdfContent:a}),console.log(`Updated existing agreement ${A.id} with edited PDF content`)}else{let A=l.agentId;if(!A&&o){let v=await d.getViewingRequest(parseInt(o));v&&v.buyerAgentId&&(A=v.buyerAgentId)}if(!A){let v=await d.getUsersByRole("agent");if(v.length>0)A=v[0].id;else{let S=await d.getUserByEmail("admin@realestateapp.com");if(!S)return t.status(500).json({error:"No agent or admin found in the system"});A=S.id}}b=await d.createAgreement({propertyId:e,type:"agency_disclosure",agreementText:`California Agency Disclosure Form for property ${l.address}`,buyerId:c,agentId:A,editedPdfContent:a,date:new Date,status:"pending"}),console.log(`Created new agreement ${b.id} with edited PDF content`)}t.json({success:!0,data:b})}catch(e){console.error("Error saving edited PDF content:",e),t.status(500).json({success:!1,error:"Failed to save edited PDF content"})}}),i.get("/api/properties/:id/agreements",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getProperty(e);if(!a)return t.status(404).json({success:!1,error:"Property not found"});let o=r.user.id,l=r.user.role;if(!(l==="admin"||l==="buyer"&&a.createdBy===o||l==="agent"&&a.agentId===o||l==="seller"&&a.sellerId===o))return t.status(403).json({success:!1,error:"You don't have permission to access agreements for this property"});let p=await d.getAgreementsByProperty(e);t.json({success:!0,data:p})}catch(e){console.error("Error fetching property agreements:",e),t.status(500).json({success:!1,error:"Failed to get property agreements"})}}),i.delete("/api/properties/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getProperty(e);if(!a)return t.status(404).json({success:!1,error:"Property not found"});let o=r.user.id,l=r.user.role;if(!(l==="admin"||l==="buyer"&&a.createdBy===o))return t.status(403).json({success:!1,error:"You don't have permission to delete this property"});if(l==="buyer"&&a.agentId)return t.status(403).json({success:!1,error:"Cannot delete property after an agent has accepted the lead"});await d.deleteProperty(e),t.json({success:!0,message:"Property deleted successfully"})}catch(e){console.error("Delete property error:",e),t.status(500).json({success:!1,error:"Failed to delete property"})}}),i.post("/api/properties/:id/send-email",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.id),l=await d.getProperty(o);if(!l)return t.status(404).json({success:!1,error:"Property not found"});let c=(e=r.user)==null?void 0:e.id,p=(a=r.user)==null?void 0:a.role;if(!c||!p)return t.status(401).json({success:!1,error:"Unauthorized"});if(!(p==="admin"||p==="buyer"&&l.createdBy===c||p==="agent"&&l.agentId===c))return t.status(403).json({success:!1,error:"You don't have permission to send an email for this property"});if(!l.sellerEmail)return t.status(400).json({success:!1,error:"No seller email address available"});console.log(`[Email Service] Sending email to seller ${l.sellerEmail} about property ${o}`);let w=await d.updateProperty(o,{emailSent:!0});try{await d.createPropertyActivityLog({propertyId:o,userId:c||null,activity:"Email sent to seller",details:{sellerEmail:l.sellerEmail,sentBy:{id:c,role:p}}})}catch(b){console.error("Failed to create activity log, but email was marked as sent:",b)}let y=[l.createdBy];l.agentId&&y.push(l.agentId),l.sellerId&&y.push(l.sellerId),g.broadcastToUsers(y,{type:"property_update",data:{propertyId:o,action:"email_sent",message:"Email has been sent to the seller"}}),t.json({success:!0,data:w})}catch(o){console.error("Send email error:",o),t.status(500).json({success:!1,error:"Failed to send email to seller"})}}),i.post("/api/properties/:id/seller-email",n,u(["agent"]),async(r,t)=>{try{let e=parseInt(r.params.id),{email:a}=r.body;if(!a||typeof a!="string"||!yr.string().email().safeParse(a).success)return t.status(400).json({success:!1,error:"Valid email is required"});let o=await d.getProperty(e);if(!o)return t.status(404).json({success:!1,error:"Property not found"});if(o.agentId!==r.user.id)return t.status(403).json({success:!1,error:"You are not assigned to this property"});let l=await d.getUserByEmail(a);if(!l){let p="Kuttybuski123*",h=await Pt(p);l=await d.createUser({email:a,password:h,role:"seller",profileStatus:"verified"}),console.log(`Seller account created: ${a} with standard password: ${p}`)}let c=await d.updateProperty(e,{sellerEmail:a,sellerId:l.id});t.json({success:!0,data:c})}catch(e){console.error("Update seller email error:",e),t.status(500).json({success:!1,error:"Failed to update seller email"})}}),i.get("/api/agents",n,async(r,t)=>{try{let o=(await d.getUsersByRole("agent")).filter(l=>l.profileStatus==="verified"&&!l.isBlocked).map(l=>({id:l.id,firstName:l.firstName,lastName:l.lastName,state:l.state,city:l.city,profileStatus:l.profileStatus}));t.json(o)}catch(e){console.error("Get all agents error:",e),t.status(500).json({success:!1,error:"Failed to fetch agents"})}}),i.get("/api/leads/available",n,u(["agent"]),async(r,t)=>{try{console.log(`Getting available leads for agent ID: ${r.user.id}`);let e=await d.getAvailableLeadsByAgent(r.user.id);console.log(`Found ${e.length} available leads`),t.json(e)}catch(e){console.error("Get available leads error:",e),t.status(500).json({success:!1,error:"Failed to fetch available leads"})}}),i.post("/api/leads/:id/claim",n,u(["agent"]),async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getAgentLead(e);if(!a)return t.status(404).json({success:!1,error:"Lead not found"});if(a.status!=="available")return t.status(400).json({success:!1,error:"This lead is no longer available"});if(a.agentId!==r.user.id)return t.status(403).json({success:!1,error:"This lead is not available to you"});let o=await d.updateAgentLead(e,{status:"claimed"});await d.updateProperty(a.propertyId,{agentId:r.user.id});try{await d.createPropertyActivityLog({propertyId:a.propertyId,userId:r.user.id,activity:"Agent claimed lead",details:{leadId:a.id,agentId:r.user.id,agentEmail:r.user.email}})}catch(l){console.error("Failed to create activity log for agent claiming lead, but lead was claimed:",l)}t.json({success:!0,data:o})}catch(e){console.error("Claim lead error:",e),t.status(500).json({success:!1,error:"Failed to claim lead"})}}),i.post("/api/uploads/id-documents",n,m.fields([{name:"idFront",maxCount:1},{name:"idBack",maxCount:1}]),async(r,t)=>{try{let e=r.files;if(!e.idFront||!e.idBack)return t.status(400).json({success:!1,error:"Both front and back ID images are required"});let a=`https://storage.example.com/user-${r.user.id}/id-front-${Date.now()}.jpg`,o=`https://storage.example.com/user-${r.user.id}/id-back-${Date.now()}.jpg`;t.json({idFrontUrl:a,idBackUrl:o})}catch(e){console.error("ID document upload error:",e),t.status(500).json({success:!1,error:"Failed to upload ID documents"})}}),i.post("/api/uploads/profile-photo",m.single("profilePhoto"),async(r,t)=>{try{if(!r.file)return t.status(400).json({success:!1,error:"Profile photo is required"});let a=`https://storage.example.com/user-profiles/profile-${Date.now()}.jpg`;t.json({success:!0,profilePhotoUrl:a})}catch(e){console.error("Profile photo upload error:",e),t.status(500).json({success:!1,error:"Failed to upload profile photo"})}}),i.post("/api/ai/extract-property",n,u(["buyer"]),async(r,t)=>{try{let{address:e}=r.body;if(!e||typeof e!="string")return t.status(400).json({success:!1,error:"Property address is required"});let a=await extractPropertyData(e);t.json(a)}catch(e){console.error("Property data extraction error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to extract property data"})}}),i.post("/api/ai/extract-property-from-url",n,u(["buyer"]),async(r,t)=>{try{let{url:e}=r.body;if(!e||typeof e!="string")return t.status(400).json({success:!1,error:"Property URL is required"});let o={...await xe(e),_extractionTimestamp:new Date().toISOString(),_extractionSource:e};t.json(o)}catch(e){console.error("Property URL extraction error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to extract property data from URL"})}}),i.post("/api/test/extract-property-from-url",async(r,t)=>{try{let{url:e}=r.body,a=r.body.timeout||45;if(!e||typeof e!="string")return t.status(400).json({success:!1,error:"Property URL is required"});console.log(`Test endpoint: Extracting property from URL: ${e} (timeout: ${a}s)`);let o=new Promise((p,h)=>{setTimeout(()=>{h(new Error(`Property extraction timed out after ${a} seconds`))},a*1e3)}),l=await Promise.race([xe(e),o]),c={...l,_extractionSource:e,_extractionTimestamp:new Date().toISOString(),_extractionMethod:l._realtorUrl?"serpapi+direct":"direct"};t.json(c)}catch(e){console.error("Property URL extraction error:",e);let a="EXTRACTION_ERROR",o=500;e instanceof Error&&(e.message.includes("timed out")?(a="TIMEOUT_ERROR",o=408):e.message.includes("CAPTCHA")||e.message.includes("detected as a bot")?(a="CAPTCHA_ERROR",o=403):(e.message.includes("Invalid URL")||e.message.includes("URL is required"))&&(a="INVALID_URL_ERROR",o=400)),t.status(o).json({success:!1,error:e instanceof Error?e.message:"Failed to extract property data from URL",errorType:a})}}),i.get("/api/emails",n,u(["admin","agent"]),async(r,t)=>{try{let e=await nt();t.json({success:!0,data:e})}catch(e){console.error("Error fetching emails:",e),t.status(500).json({success:!1,error:"Failed to fetch emails"})}}),i.get("/api/emails/role/:role",n,u(["admin"]),async(r,t)=>{try{let e=r.params.role;if(!["buyer","agent","admin","seller"].includes(e))return t.status(400).json({success:!1,error:"Invalid role specified"});let a=await d.getEmailsByRole(e);t.json({success:!0,data:a})}catch(e){console.error("Error fetching emails by role:",e),t.status(500).json({success:!1,error:"Failed to fetch role-specific emails"})}}),i.get("/api/emails/user/:userId",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.userId);if(((e=r.user)==null?void 0:e.id)!==o&&((a=r.user)==null?void 0:a.role)!=="admin")return t.status(403).json({success:!1,error:"Unauthorized access to user emails"});let l=await at(o);t.json({success:!0,data:l})}catch(o){console.error("Error fetching user emails:",o),t.status(500).json({success:!1,error:"Failed to fetch user emails"})}}),i.get("/api/emails/entity/:type/:id",n,async(r,t)=>{try{let{type:e,id:a}=r.params,o=parseInt(a);if(!["viewing_request","property","agreement"].includes(e))return t.status(400).json({success:!1,error:"Invalid entity type"});let l=await st(e,o);t.json({success:!0,data:l})}catch(e){console.error("Error fetching entity emails:",e),t.status(500).json({success:!1,error:"Failed to fetch entity emails"})}}),i.get("/api/test/property-extractor",(r,t)=>{t.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>Property Extraction Tester</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; max-width: 1000px; margin: 0 auto; }
          h1 { color: #2c3e50; }
          .form-group { margin-bottom: 15px; }
          label { display: block; margin-bottom: 5px; font-weight: bold; }
          input[type="url"] { width: 100%; padding: 8px; font-size: 16px; }
          input[type="number"] { width: 80px; padding: 8px; font-size: 16px; }
          button { background: #3498db; color: white; border: none; padding: 10px 15px; cursor: pointer; font-size: 16px; }
          button:hover { background: #2980b9; }
          #results { margin-top: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
          .property-data { margin-top: 15px; }
          .property-section { margin-bottom: 15px; }
          .property-section h3 { margin-bottom: 5px; color: #2c3e50; }
          .property-field { margin-bottom: 5px; }
          .property-field strong { margin-right: 10px; min-width: 120px; display: inline-block; }
          .tab-container { display: flex; margin-top: 20px; border-bottom: 1px solid #ddd; }
          .tab { padding: 10px 15px; cursor: pointer; background: #f5f5f5; }
          .tab.active { background: #fff; border: 1px solid #ddd; border-bottom: none; }
          .sites-container { display: flex; flex-wrap: wrap; margin-top: 20px; }
          .site-card { border: 1px solid #ddd; padding: 10px; margin: 5px; cursor: pointer; width: 200px; text-align: center; }
          .site-card:hover { background: #f5f5f5; }
          .error-card { border-left: 4px solid #e74c3c; padding: 10px; margin-top: 10px; background: #fcf0f0; }
          .success-card { border-left: 4px solid #2ecc71; padding: 10px; margin-top: 10px; background: #f0fcf5; }
          .flex-row { display: flex; align-items: center; }
          .flex-row label { margin-right: 10px; margin-bottom: 0; }
        </style>
      </head>
      <body>
        <h1>Property Extraction Tester</h1>
        
        <div class="tab-container">
          <div class="tab active" onclick="switchTab('url-tab')">Test by URL</div>
          <div class="tab" onclick="switchTab('sites-tab')">Sample Real Estate Sites</div>
        </div>
        
        <div id="url-tab" class="tab-content">
          <div class="form-group">
            <label for="urlInput">Enter Property URL:</label>
            <input type="url" id="urlInput" placeholder="https://www.zillow.com/homedetails/..." required>
          </div>
          
          <div class="form-group flex-row">
            <label for="timeoutInput">Timeout (seconds):</label>
            <input type="number" id="timeoutInput" value="45" min="10" max="120">
          </div>
          
          <button onclick="testExtraction()">Extract Property Data</button>
        </div>
        
        <div id="sites-tab" class="tab-content" style="display:none;">
          <h3>Select a real estate site to test:</h3>
          <p>These are pre-configured test URLs for different real estate websites.</p>
          
          <div class="sites-container">
            <div class="site-card" onclick="selectSite('https://www.homes.com/property/509-lake-shore-ter-s-lake-quivira-ks-66217/id-400026765562/')">
              <strong>Homes.com</strong>
              <p>Regional site with less protection</p>
            </div>
            
            <div class="site-card" onclick="selectSite('https://www.homefinder.com/property/4-bedrooms-2-bathrooms-Residential-115246227-9902-Corella-Ave-Whittier-California-90603')">
              <strong>HomeFinder</strong>
              <p>Smaller listing site</p>
            </div>
            
            <div class="site-card" onclick="selectSite('https://www.trulia.com/p/ca/santa-clara/1883-hillebrant-pl-santa-clara-ca-95050--2084636767')">
              <strong>Trulia</strong>
              <p>Mid-tier listing site</p>
            </div>
            
            <div class="site-card" onclick="selectSite('https://www.redfin.com/TX/Austin/4513-Spanish-Oak-Trl-78731/home/31264436')">
              <strong>Redfin</strong>
              <p>Popular listing site</p>
            </div>
            
            <div class="site-card" onclick="selectSite('https://www.realtor.com/realestateandhomes-detail/321-Cedros-Ave-Unit-A_Solana-Beach_CA_92075_M25131-96845')">
              <strong>Realtor.com</strong>
              <p>Major listing site</p>
            </div>
            
            <div class="site-card" onclick="selectSite('https://www.zillow.com/homedetails/122-N-Clark-Dr-Los-Angeles-CA-90048/20516854_zpid/')">
              <strong>Zillow</strong>
              <p>Major listing site (strongest protection)</p>
            </div>
          </div>
        </div>
        
        <div id="results" style="display: none;">
          <h2>Extraction Results</h2>
          <div id="loader" style="display: none;">
            <p>Extracting data from property listing...</p>
            <p>This may take up to <span id="timeoutDisplay">45</span> seconds.</p>
          </div>
          <div id="errorMessage" style="display: none;" class="error-card"></div>
          <div id="propertyData"></div>
        </div>
        
        <script>
          function switchTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
              tab.style.display = 'none';
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
              tab.classList.remove('active');
            });
            
            // Show the selected tab content
            document.getElementById(tabId).style.display = 'block';
            
            // Set the clicked tab as active
            event.currentTarget.classList.add('active');
          }
          
          function selectSite(url) {
            document.getElementById('urlInput').value = url;
            switchTab('url-tab');
            
            // Scroll to the URL input
            document.getElementById('urlInput').scrollIntoView({ behavior: 'smooth' });
          }
          
          async function testExtraction() {
            const url = document.getElementById('urlInput').value;
            const timeout = parseInt(document.getElementById('timeoutInput').value) || 45;
            
            if (!url) {
              alert('Please enter a property URL');
              return;
            }
            
            // Update timeout display
            document.getElementById('timeoutDisplay').textContent = timeout;
            
            const resultsDiv = document.getElementById('results');
            const loaderDiv = document.getElementById('loader');
            const errorDiv = document.getElementById('errorMessage');
            const propertyDataDiv = document.getElementById('propertyData');
            
            resultsDiv.style.display = 'block';
            loaderDiv.style.display = 'block';
            errorDiv.style.display = 'none';
            propertyDataDiv.innerHTML = '';
            
            // Scroll to results
            resultsDiv.scrollIntoView({ behavior: 'smooth' });
            
            try {
              const response = await fetch('/api/test/extract-property-from-url', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url, timeout })
              });
              
              const data = await response.json();
              
              if (!response.ok) {
                throw new Error(data.error || 'Failed to extract property data');
              }
              
              displayPropertyData(data);
            } catch (error) {
              errorDiv.textContent = error.message;
              errorDiv.style.display = 'block';
            } finally {
              loaderDiv.style.display = 'none';
            }
          }
          
          function displayPropertyData(data) {
            const propertyDataDiv = document.getElementById('propertyData');
            
            const html = \`
              <div class="property-data">
                <div class="property-section">
                  <h3>Basic Information</h3>
                  <div class="property-field"><strong>Address:</strong> \${data.address || 'Not available'}</div>
                  <div class="property-field"><strong>City:</strong> \${data.city || 'Not available'}</div>
                  <div class="property-field"><strong>State:</strong> \${data.state || 'Not available'}</div>
                  <div class="property-field"><strong>ZIP:</strong> \${data.zip || 'Not available'}</div>
                  <div class="property-field"><strong>Property URL:</strong> <a href="\${data.propertyUrl}" target="_blank">\${data.propertyUrl}</a></div>
                </div>
                
                <div class="property-section">
                  <h3>Property Details</h3>
                  <div class="property-field"><strong>Property Type:</strong> \${data.propertyType || 'Not available'}</div>
                  <div class="property-field"><strong>Bedrooms:</strong> \${data.bedrooms || 'Not available'}</div>
                  <div class="property-field"><strong>Bathrooms:</strong> \${data.bathrooms || 'Not available'}</div>
                  <div class="property-field"><strong>Square Feet:</strong> \${data.squareFeet || 'Not available'}</div>
                  <div class="property-field"><strong>Price:</strong> \${data.price || 'Not available'}</div>
                  <div class="property-field"><strong>Year Built:</strong> \${data.yearBuilt || 'Not available'}</div>
                </div>
                
                <div class="property-section">
                  <h3>Agent Information</h3>
                  <div class="property-field"><strong>Listing Agent:</strong> \${data.listingAgentName || 'Not available'}</div>
                  <div class="property-field"><strong>Agent Phone:</strong> \${data.listingAgentPhone || 'Not available'}</div>
                  <div class="property-field"><strong>Agent Company:</strong> \${data.listingAgentCompany || 'Not available'}</div>
                  <div class="property-field"><strong>Agent License #:</strong> \${data.listingAgentLicenseNo || 'Not available'}</div>
                  <div class="property-field"><strong>Original Listing Text:</strong> \${data.listedby || 'Not available'}</div>
                </div>
                
                <div class="property-section">
                  <h3>Description</h3>
                  <div class="property-field">\${data.description || 'No description available'}</div>
                </div>
                
                <div class="property-section">
                  <h3>Features</h3>
                  <div class="property-field">
                    \${Array.isArray(data.features) && data.features.length > 0 
                      ? '<ul>' + data.features.map(feature => \`<li>\${feature}</li>\`).join('') + '</ul>'
                      : 'No features available'}
                  </div>
                </div>
              </div>
            \`;
            
            propertyDataDiv.innerHTML = html;
          }
        </script>
      </body>
      </html>
    `)}),i.post("/api/ai/extract-id-data",n,async(r,t)=>{try{let{idFrontBase64:e,idBackBase64:a}=r.body;if(!e||!a)return t.status(400).json({success:!1,error:"Both front and back ID images are required in base64 format"});let o=await extractIDData(e,a);t.json({success:!0,data:o})}catch(e){console.error("ID data extraction error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to extract ID data"})}}),i.get("/api/messages/property/:propertyId/user/:userId",n,async(r,t)=>{try{let e=parseInt(r.params.propertyId),a=parseInt(r.params.userId),o=await d.getProperty(e);if(!o)return t.status(404).json({success:!1,error:"Property not found"});let l=r.user.id,c=r.user.role;if(!(c==="admin"||c==="buyer"&&o.createdBy===l||c==="seller"&&o.sellerId===l||c==="agent"&&o.agentId===l))return t.status(403).json({success:!1,error:"You don't have access to this property's messages"});if(!(o.createdBy===a||o.sellerId===a||o.agentId===a))return t.status(403).json({success:!1,error:"The specified user is not a participant in this property"});let w=await d.getMessagesBetweenUsers(e,l,a);t.json(w)}catch(e){console.error("Get messages error:",e),t.status(500).json({success:!1,error:"Failed to fetch messages"})}}),i.get("/api/public/viewing-request/:token",async(r,t)=>{try{let{token:e}=r.params;if(!e)return t.status(400).json({success:!1,error:"Invalid token"});let a=await he(e);if(!a||!a.isValid)return t.status(403).json({success:!1,error:(a==null?void 0:a.errorMessage)||"Invalid or expired token"});let o={viewingRequest:a.viewingRequest,property:a.property,buyer:{firstName:a.buyer.firstName,lastName:a.buyer.lastName,email:a.buyer.email,phone:a.buyer.phone},agent:a.agent?{firstName:a.agent.firstName,lastName:a.agent.lastName,email:a.agent.email,phone:a.agent.phone}:null,token:e};t.json({success:!0,data:o})}catch(e){console.error("Error getting public viewing request:",e),t.status(500).json({success:!1,error:"Failed to get viewing request information"})}}),i.post("/api/public/viewing-request/:token/respond",async(r,t)=>{try{let{token:e}=r.params,{status:a,responseMessage:o,confirmedDate:l,confirmedEndDate:c}=r.body;if(!e)return t.status(400).json({success:!1,error:"Invalid token"});if(!["accepted","rejected","rescheduled"].includes(a))return t.status(400).json({success:!1,error:"Invalid status. Must be one of: accepted, rejected, rescheduled"});if(a==="rescheduled"&&(!l||!c))return t.status(400).json({success:!1,error:"Confirmed date and end date are required for rescheduling"});let p=await he(e);if(!p||!p.isValid)return t.status(403).json({success:!1,error:(p==null?void 0:p.errorMessage)||"Invalid or expired token"});if(p.viewingRequest.status!=="pending")return t.status(400).json({success:!1,error:`This viewing request has already been ${p.viewingRequest.status}`});let h={status:a,responseMessage:o||null,updatedAt:new Date};l&&(h.confirmedDate=new Date(l)),c&&(h.confirmedEndDate=new Date(c));let w=await d.updateViewingRequest(p.viewingRequest.id,h);await d.createPropertyActivityLog({propertyId:p.property.id,userId:null,activity:`Viewing request ${a} by listing agent`,details:{requestId:w.id,status:w.status,via:"public_link"}}),(a==="accepted"||a==="rejected")&&await d.invalidateViewingToken(e),t.json({success:!0,data:{viewingRequest:w,message:`Viewing request ${a==="accepted"?"accepted":a==="rejected"?"rejected":"rescheduled"} successfully`}})}catch(e){console.error("Error responding to viewing request:",e),t.status(500).json({success:!1,error:"Failed to respond to viewing request"})}}),i.get("/api/admin/users",n,u(["admin"]),async(r,t)=>{try{let e=await d.getAllUsers();t.json(e)}catch(e){console.error("Get all users error:",e),t.status(500).json({success:!1,error:"Failed to fetch users"})}}),i.get("/api/admin/properties",n,u(["admin"]),async(r,t)=>{try{let e=await d.getAllProperties();t.json(e)}catch(e){console.error("Get all properties error:",e),t.status(500).json({success:!1,error:"Failed to fetch properties"})}}),i.get("/api/admin/agent-referral-agreements",n,u(["admin"]),async(r,t)=>{try{let e=await d.getAgreementsByType("agent_referral"),a=await Promise.all(e.map(async o=>{let l=await d.getUser(o.agentId);return{...o,agent:l?{id:l.id,name:`${l.firstName||""} ${l.lastName||""}`.trim()||l.email,email:l.email,licenseNumber:l.licenseNumber}:null}}));t.json({success:!0,data:a})}catch(e){console.error("Error fetching agent referral agreements:",e),t.status(500).json({success:!1,error:"Failed to fetch agent referral agreements"})}}),i.get("/api/admin/agents",n,u(["admin"]),async(r,t)=>{try{let e=await d.getUsersByRole("agent");t.json(e)}catch(e){console.error("Get agents error:",e),t.status(500).json({success:!1,error:"Failed to fetch agents"})}}),i.get("/api/admin/buyer-journey-metrics",n,u(["admin"]),async(r,t)=>{try{let e=await d.getUsersByRole("buyer"),a=e.length,l=(await d.getAllProperties()).filter(S=>S.createdBy!==null),p=new Set(l.map(S=>S.createdBy)).size,h=await d.getMessagesByProperty(0,!0),w=new Set;h.forEach(S=>{let R=S.senderId,_=S.receiverId,x=e.find(k=>k.id===R),B=e.find(k=>k.id===_);x&&x.role==="buyer"&&w.add(R),B&&B.role==="buyer"&&w.add(_)});let y=w.size,b=await d.getViewingRequestsByProperty(0,!0),v=new Set(b.map(S=>S.buyerId)).size;t.json({success:!0,data:{totalBuyers:a,buyersWithProperties:p,buyersWithMessages:y,buyersWithViewings:v,conversionRates:{toProperties:a>0?p/a*100:0,toMessages:p>0?y/p*100:0,toViewings:y>0?v/y*100:0,overall:a>0?v/a*100:0}}})}catch(e){console.error("Get buyer journey metrics error:",e),t.status(500).json({success:!1,error:"Failed to fetch buyer journey metrics"})}}),i.get("/api/admin/agent-journey-metrics",n,u(["admin"]),async(r,t)=>{try{let e=await d.getUsersByRole("agent"),a=e.length,o=await d.getAllProperties(),c=new Set(o.filter(_=>_.agentId!==null).map(_=>_.agentId)).size,p=await d.getMessagesByProperty(0,!0),h=new Set;p.forEach(_=>{let x=_.senderId,B=_.receiverId,k=e.find(M=>M.id===x),F=e.find(M=>M.id===B);k&&k.role==="agent"&&h.add(x),F&&F.role==="agent"&&h.add(B)});let w=h.size,y=await d.getViewingRequestsByProperty(0,!0),A=new Set(y.filter(_=>_.agentId!==null).map(_=>_.agentId)).size,v=await d.getAgreementsByType("all"),R=new Set(v.filter(_=>_.agentId!==null).map(_=>_.agentId)).size;t.json({success:!0,data:{totalAgents:a,agentsWithAssignedProperties:c,agentsWithMessages:w,agentsWithViewings:A,agentsWithAgreements:R,conversionRates:{toProperties:a>0?c/a*100:0,toMessages:c>0?w/c*100:0,toViewings:w>0?A/w*100:0,toAgreements:A>0?R/A*100:0,overall:a>0?R/a*100:0}}})}catch(e){console.error("Get agent journey metrics error:",e),t.status(500).json({success:!1,error:"Failed to fetch agent journey metrics"})}}),i.get("/api/admin/seller-journey-metrics",n,u(["admin"]),async(r,t)=>{try{let e=await d.getUsersByRole("seller"),a=e.length,o=await d.getAllProperties(),c=new Set(o.filter(S=>S.sellerId!==null).map(S=>S.sellerId)).size,p=await d.getMessagesByProperty(0,!0),h=new Set;p.forEach(S=>{let R=S.senderId,_=S.receiverId,x=e.find(k=>k.id===R),B=e.find(k=>k.id===_);x&&x.role==="seller"&&h.add(R),B&&B.role==="seller"&&h.add(_)});let w=h.size,y=await d.getViewingRequestsByProperty(0,!0),b=o.filter(S=>S.sellerId!==null),A=new Set;y.forEach(S=>{let R=b.find(_=>_.id===S.propertyId);R&&R.sellerId&&A.add(R.sellerId)});let v=A.size;t.json({success:!0,data:{totalSellers:a,sellersWithListedProperties:c,sellersWithMessages:w,sellersWithViewingRequests:v,conversionRates:{toProperties:a>0?c/a*100:0,toMessages:c>0?w/c*100:0,toViewings:w>0?v/w*100:0,overall:a>0?v/a*100:0}}})}catch(e){console.error("Get seller journey metrics error:",e),t.status(500).json({success:!1,error:"Failed to fetch seller journey metrics"})}}),i.put("/api/admin/users/:id/block",n,u(["admin"]),async(r,t)=>{try{let e=parseInt(r.params.id),{block:a}=r.body;if(typeof a!="boolean")return t.status(400).json({success:!1,error:"Block parameter must be a boolean"});let o=await d.getUser(e);if(!o)return t.status(404).json({success:!1,error:"User not found"});if(o.role==="admin")return t.status(403).json({success:!1,error:"Cannot block admin users"});let l=await d.updateUser(e,{isBlocked:a});t.json({success:!0,data:l})}catch(e){console.error("Block user error:",e),t.status(500).json({success:!1,error:"Failed to update user"})}}),i.put("/api/properties/:id/choose-agent",n,u(["buyer"]),async(r,t)=>{try{let e=parseInt(r.params.id),{agentId:a}=r.body;if(!a||typeof a!="number")return t.status(400).json({success:!1,error:"Valid agent ID is required"});let o=await d.getProperty(e);if(!o)return t.status(404).json({success:!1,error:"Property not found"});if(o.createdBy!==r.user.id)return t.status(403).json({success:!1,error:"You don't have permission to choose an agent for this property"});let l=await d.getUser(a);if(!l||l.role!=="agent"||l.profileStatus!=="verified"||l.isBlocked)return t.status(400).json({success:!1,error:"Invalid or unavailable agent"});let c=await d.updateProperty(e,{agentId:a});try{await d.createPropertyActivityLog({propertyId:e,userId:r.user.id,activity:"Buyer chose agent",details:{previousAgentId:o.agentId,newAgentId:a,buyerId:r.user.id}})}catch(p){console.error("Failed to create activity log for buyer choosing agent, but agent was assigned:",p)}g.broadcastToUsers([a],{type:"notification",data:{message:"A buyer has assigned you to their property!",propertyId:e}}),t.json({success:!0,data:c})}catch(e){console.error("Choose agent error:",e),t.status(500).json({success:!1,error:"Failed to assign agent to property"})}}),i.put("/api/admin/properties/:id/reassign",n,u(["admin"]),async(r,t)=>{try{let e=parseInt(r.params.id),{agentId:a}=r.body;if(!a||typeof a!="number")return t.status(400).json({success:!1,error:"Valid agent ID is required"});let o=await d.getProperty(e);if(!o)return t.status(404).json({success:!1,error:"Property not found"});let l=await d.getUser(a);if(!l||l.role!=="agent")return t.status(400).json({success:!1,error:"Invalid agent ID"});let c=await d.updateProperty(e,{agentId:a});try{await d.createPropertyActivityLog({propertyId:e,userId:r.user.id,activity:"Admin reassigned agent",details:{previousAgentId:o.agentId,newAgentId:a,adminId:r.user.id}})}catch(p){console.error("Failed to create activity log for admin reassigning agent, but agent was reassigned:",p)}t.json({success:!0,data:c})}catch(e){console.error("Reassign agent error:",e),t.status(500).json({success:!1,error:"Failed to reassign agent"})}}),i.get("/api/properties/:id/logs",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.id),l=await d.getProperty(o);if(!l)return t.status(404).json({success:!1,error:"Property not found"});let c=(e=r.user)==null?void 0:e.id;if(((a=r.user)==null?void 0:a.role)!=="admin"&&l.createdBy!==c&&l.sellerId!==c&&l.agentId!==c)return t.status(403).json({success:!1,error:"You don't have permission to perform this action"});let h=await d.getPropertyActivityLogs(o);t.json({success:!0,data:h})}catch(o){console.error("Error getting property logs:",o),t.status(500).json({success:!1,error:"Failed to get property logs"})}}),i.get("/api/properties/:id/agreements",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.id),l=await d.getProperty(o);if(!l)return t.status(404).json({success:!1,error:"Property not found"});let c=(e=r.user)==null?void 0:e.id;if(((a=r.user)==null?void 0:a.role)!=="admin"&&l.createdBy!==c&&l.sellerId!==c&&l.agentId!==c)return t.status(403).json({success:!1,error:"You don't have permission to view agreements for this property"});let h=await d.getAgreementsByProperty(o);t.json({success:!0,data:h})}catch(o){console.error("Error getting property agreements:",o),t.status(500).json({success:!1,error:"Failed to get property agreements"})}}),i.get("/api/agreements/:id",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.id),l=await d.getAgreement(o);if(!l)return t.status(404).json({success:!1,error:"Agreement not found"});let c=await d.getProperty(l.propertyId);if(!c)return t.status(404).json({success:!1,error:"Property not found"});let p=(e=r.user)==null?void 0:e.id;if(((a=r.user)==null?void 0:a.role)!=="admin"&&c.createdBy!==p&&c.sellerId!==p&&c.agentId!==p&&l.buyerId!==p&&l.agentId!==p)return t.status(403).json({success:!1,error:"You don't have permission to view this agreement"});t.json({success:!0,data:l})}catch(o){console.error("Error getting agreement:",o),t.status(500).json({success:!1,error:"Failed to get agreement"})}}),i.get("/api/agreements/:id/document",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getAgreement(e);if(!a)return t.status(404).json({success:!1,error:"Agreement not found"});let o=await d.getPropertyWithParticipants(a.propertyId);if(!o)return t.status(404).json({success:!1,error:"Property not found"});let l=r.user.id,c=r.user.role;if(!(c==="admin"||c==="buyer"&&o.buyerId===l||c==="agent"&&o.agentId===l||c==="seller"&&o.sellerId===l))return t.status(403).json({success:!1,error:"You don't have permission to access this agreement"});t.json({success:!0,data:{id:a.id,type:a.type,status:a.status,documentUrl:a.documentUrl}})}catch(e){console.error("Error fetching agreement document:",e),t.status(500).json({success:!1,error:"Failed to get agreement document"})}}),i.get("/api/agreements/:id/view-pdf",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getAgreement(e);if(!a)return t.status(404).json({success:!1,error:"Agreement not found"});let o=await d.getPropertyWithParticipants(a.propertyId);if(!o)return t.status(404).json({success:!1,error:"Property not found"});let l=r.user.id,c=r.user.role;if(!(c==="admin"||c==="buyer"&&o.buyerId===l||c==="agent"&&o.agentId===l||c==="seller"&&o.sellerId===l))return t.status(403).json({success:!1,error:"You don't have permission to access this agreement"});if(!a.documentUrl)return t.status(404).json({success:!1,error:"No document URL found for this agreement"});let h="";a.documentUrl.startsWith("/uploads/")?h=j.join(process.cwd(),a.documentUrl.substring(1)):h=j.join(process.cwd(),"uploads",a.documentUrl);try{await U.promises.access(h,U.constants.F_OK)}catch{return console.error(`File not found at path: ${h}`),t.status(404).json({success:!1,error:"Document file not found"})}if(c==="agent"&&a.type==="agency_disclosure"&&a.buyerId&&a.buyerId!==l&&a.status==="signed_by_buyer"){console.log("Agent viewing buyer-signed agreement, regenerating PDF with signatures...");try{let y=await d.getUser(a.buyerId),b=await d.getUser(l);if(!y||!b)throw new Error("Could not find buyer or agent");let A={buyerName1:y?`${y.firstName||""} ${y.lastName||""}`.trim()||y.email:"",agentName:b?`${b.firstName||""} ${b.lastName||""}`.trim()||b.email:"",agentBrokerageName:"Coldwell Banker Grass Roots Realty",agentLicenseNumber:"2244751",propertyAddress:o.address,propertyCity:o.city||"",propertyState:o.state||"",propertyZip:o.zip||"",isEditable:!1},v=await ae(A);return a.buyerSignature&&(v=await W(v,a.buyerSignature,"buyer1")),a.agentSignature&&(v=await W(v,a.agentSignature,"agent")),t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",`inline; filename="Agency_Disclosure_${e}.pdf"`),t.send(v)}catch(y){console.error("Error regenerating PDF:",y)}}let w=await U.promises.readFile(h);t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",`inline; filename="Agreement_${e}.pdf"`),t.send(w)}catch(e){console.error("Error serving agreement PDF:",e),t.status(500).json({success:!1,error:"Failed to serve agreement PDF"})}}),i.post("/api/properties/:id/agreements",n,async(r,t)=>{var e,a;try{let o=parseInt(r.params.id),l=await d.getProperty(o);if(!l)return t.status(404).json({success:!1,error:"Property not found"});let c=r.body;if(c.type==="agency_disclosure"){if(!c.signatureData)return t.status(400).json({success:!1,error:"Signature data is required for disclosure form"});if(!l.agentId)return t.status(400).json({success:!1,error:"Property must have an assigned agent"});let p=await d.createAgreement({propertyId:o,type:"agency_disclosure",agentId:l.agentId,buyerId:r.user.id,agreementText:JSON.stringify(c.details||{}),buyerSignature:c.signatureData,date:new Date,status:"signed_by_buyer"});try{await d.createPropertyActivityLog({propertyId:o,userId:r.user.id,activity:"Agency disclosure form signed by buyer",details:{agreementId:p.id,agreementType:"agency_disclosure",status:p.status}})}catch(h){console.error("Failed to create activity log for agreement creation, but agreement was created:",h)}return t.status(201).json({success:!0,data:p})}else{if(r.user.role!=="agent"&&r.user.role!=="admin")return t.status(403).json({success:!1,error:"Only agents can create standard agreements"});if(r.user.role==="agent"&&l.agentId!==r.user.id)return t.status(403).json({success:!1,error:"You are not the agent assigned to this property"});if(!c.buyerId||!c.agreementText||!c.agentSignature)return t.status(400).json({success:!1,error:"Missing required fields: buyerId, agreementText, and agentSignature are required"});let p=await d.createAgreement({propertyId:o,type:"standard",agentId:r.user.role==="admin"?c.agentId:r.user.id,buyerId:c.buyerId,agreementText:c.agreementText,agentSignature:c.agentSignature,date:new Date,status:"pending_buyer"});try{await d.createPropertyActivityLog({propertyId:o,userId:r.user.id,activity:"Agreement created",details:{agreementId:p.id,agreementType:"standard",status:p.status}})}catch(h){console.error("Failed to create activity log for agreement creation, but agreement was created:",h)}t.status(201).json({success:!0,data:p})}}catch(o){console.error("Error creating agreement:",o),console.log("Agreement data:",JSON.stringify(r.body,null,2)),console.log("Property ID:",r.params.id),console.log("Current user:",(e=r.user)==null?void 0:e.id,(a=r.user)==null?void 0:a.role),t.status(500).json({success:!1,error:"Failed to create agreement",details:o instanceof Error?o.message:String(o)})}}),i.patch("/api/agreements/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getAgreement(e);if(!a)return t.status(404).json({success:!1,error:"Agreement not found"});let o=r.body;if(o.buyerSignature){if(r.user.id!==a.buyerId&&r.user.role!=="admin")return t.status(403).json({success:!1,error:"Only the buyer can sign as the buyer"});a.type==="agency_disclosure"?o.status="signed_by_buyer":o.status="signed_buyer"}else if(o.agentSignature&&a.type==="agency_disclosure"){let c=await d.getProperty(a.propertyId);if(!c)return t.status(404).json({success:!1,error:"Property not found"});if(r.user.id!==c.agentId&&r.user.role!=="admin")return t.status(403).json({success:!1,error:"Only the assigned agent can sign the disclosure form"});a.buyerSignature?o.status="pending":o.status="pending_buyer"}else if(o.sellerSignature){let c=await d.getProperty(a.propertyId);if(!c)return t.status(404).json({success:!1,error:"Property not found"});if(r.user.id!==c.sellerId&&r.user.role!=="admin")return t.status(403).json({success:!1,error:"Only the seller can sign as the seller"});if(a.type==="agency_disclosure"){if(o.status="signed_by_seller",a.buyerSignature&&a.agentSignature){let p=await d.getAgreementsByProperty(a.propertyId);(await d.getViewingRequestsByProperty(a.propertyId)).some(y=>y.status==="pending")&&(o.status="signed_by_seller")}}else o.status="completed"}else if(o.status&&r.user.role!=="admin")return t.status(403).json({success:!1,error:"Only administrators can update status directly"});let l=await d.updateAgreement(e,o);try{await d.createPropertyActivityLog({propertyId:a.propertyId,userId:r.user.id,activity:`Agreement ${l.status}`,details:{agreementId:e,previousStatus:a.status,newStatus:l.status}})}catch(c){console.error("Failed to create activity log for agreement update, but agreement was updated:",c)}t.json({success:!0,data:l})}catch(e){console.error("Error updating agreement:",e),t.status(500).json({success:!1,error:"Failed to update agreement"})}}),i.post("/api/properties/:id/generate-agreement-draft",n,u(["agent","admin"]),async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getPropertyWithParticipants(e);if(!a)return t.status(404).json({success:!1,error:"Property not found"});if(r.user.role==="agent"&&a.agentId!==r.user.id)return t.status(403).json({success:!1,error:"You are not the agent assigned to this property"});if(!a.createdBy)return t.status(400).json({success:!1,error:"Property must have a buyer"});let o=a.buyer||await d.getUser(a.createdBy);if(!o)return t.status(404).json({success:!1,error:"Buyer not found"});let l=new Date,c=new Date;c.setDate(c.getDate()+90);let p=r.user.firstName&&r.user.lastName?`${r.user.firstName} ${r.user.lastName}`:r.user.email,h=o.firstName&&o.lastName?`${o.firstName} ${o.lastName}`:o.email,w=o.addressLine1?`${o.addressLine1}${o.addressLine2?`, ${o.addressLine2}`:""}, ${o.city||""}, ${o.state||""} ${o.zip||""}`:"",y=`
BUYER REPRESENTATION AGREEMENT

This Buyer Representation Agreement ("Agreement") is entered into on ${l.toISOString().split("T")[0]} between:

BUYER: ${h}
Address: ${w}

And

BROKER/AGENT: ${p}
License #: 
Brokerage: 

1. APPOINTMENT OF BROKER/AGENT:
Buyer appoints Agent as Buyer's exclusive real estate agent for the purpose of finding and acquiring real property as follows:
Property Address: ${a.address}
City: ${a.city||""}
State: ${a.state||""}
Zip: ${a.zip||""}

2. TERM:
This Agreement shall commence on ${l.toISOString().split("T")[0]} and shall expire at 11:59 PM on ${c.toISOString().split("T")[0]} (90 days).

3. BROKER/AGENT'S OBLIGATIONS:
a) To use professional knowledge and skills to find the property described above.
b) To present all offers and counteroffers in a timely manner.
c) To disclose all known material facts about the property.
d) To maintain the confidentiality of Buyer's personal and financial information.
e) To represent Buyer's interests diligently and in good faith.

4. BUYER'S OBLIGATIONS:
a) To work exclusively with Agent for the purpose of purchasing property as described above.
b) To provide accurate personal and financial information.
c) To view properties only by appointment through Agent.
d) To negotiate the purchase of property only through Agent.
e) To act in good faith toward completing a purchase.

5. COMPENSATION:
a) If Buyer purchases a property during the term of this Agreement, compensation to Agent will be as follows:
   - Agent shall be paid a commission of 3% of the purchase price.
   - If the listing broker or seller offers a commission less than the above, Buyer will be responsible for the difference.

6. TERMINATION:
This Agreement may be terminated by mutual consent of the parties or as otherwise provided by law.

7. ADDITIONAL TERMS:

`,b=await d.createAgreement({propertyId:e,type:"standard",agentId:r.user.id,buyerId:o.id,agreementText:y,date:new Date,status:"draft"});try{await d.createPropertyActivityLog({propertyId:e,userId:r.user.id,activity:"Draft agreement created",details:{agreementId:b.id,status:"draft"}})}catch(A){console.error("Failed to create activity log for draft agreement:",A)}t.status(201).json({success:!0,data:b})}catch(e){console.error("Error generating draft agreement:",e),t.status(500).json({success:!1,error:"Failed to generate draft agreement"})}}),i.post("/api/properties/:id/preview-agency-disclosure",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=r.body,o=r.query.editable==="true",l=r.query.viewingRequestId?parseInt(r.query.viewingRequestId):void 0;if(!e)return t.status(400).json({success:!1,error:"Property ID is required"});if(!await d.getProperty(e))return t.status(404).json({success:!1,error:"Property not found"});let p=await d.getAgreementsByProperty(e),h=r.user.id;if(r.user.role==="agent"){let S=p.filter(R=>R.type==="agency_disclosure"&&R.status==="signed_by_buyer"&&R.buyerSignature);if(S.length>0){let R=S[S.length-1];console.log("Agent user found buyer-signed agreement ID:",R.id);try{let _="";R.documentUrl&&R.documentUrl.startsWith("/uploads/")&&(_=j.join(process.cwd(),R.documentUrl.substring(1)),console.log("Using buyer-signed document from path:",_));let x;if(_&&U.existsSync(_))try{x=U.readFileSync(_),console.log("Successfully loaded buyer-signed PDF from file system")}catch(B){console.error("Error reading buyer-signed PDF file:",B)}if(!x){console.log("Generating from template with buyer's signature data");let B=null;R.buyerId&&(B=await d.getUser(R.buyerId));let k=await d.getUser(h),F={...a,buyerName1:B?`${B.firstName||""} ${B.lastName||""}`.trim()||B.email:"",isEditable:!0};x=await ae(F),R.buyerSignature&&(x=await W(x,R.buyerSignature,"buyer1"))}return t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",'inline; filename="Agency_Disclosure_Preview.pdf"'),o&&(console.log("Keeping form fields editable as requested"),t.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),t.setHeader("Pragma","no-cache"),t.setHeader("Expires","0"),t.setHeader("X-PDF-Editable","true")),t.send(x)}catch(_){console.error("Error processing buyer-signed form for agent:",_)}}}let y=p.filter(S=>S.type==="agency_disclosure"&&S.editedPdfContent!==null&&S.editedPdfContent!==void 0);if(y.length>0){let S=y[y.length-1];if(S.editedPdfContent){console.log("Using edited PDF content from database for agreement ID:",S.id);let R=Buffer.from(S.editedPdfContent,"base64");if(o){console.log("Processing edited PDF to ensure fields remain editable");let _={...a,isEditable:!0};R=await ae(_,R)}return t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",'inline; filename="Agency_Disclosure_Preview.pdf"'),o&&(console.log("Keeping form fields editable as requested"),t.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),t.setHeader("Pragma","no-cache"),t.setHeader("Expires","0"),t.setHeader("X-PDF-Editable","true")),t.send(R)}else console.log("Agreement found but no edited PDF content in database for agreement ID:",S.id)}console.log("No edited PDF content found in database, generating a new PDF from template");let b={...a,isEditable:o},A=await ae(b);t.setHeader("Content-Type","application/pdf");let v=r.query.download==="true";t.setHeader("Content-Disposition",'inline; filename="Agency_Disclosure_Preview.pdf"'),o&&(t.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),t.setHeader("Pragma","no-cache"),t.setHeader("Expires","0"),t.setHeader("X-PDF-Editable","true")),t.send(A)}catch(e){console.error("Error generating agency disclosure preview:",e),t.status(500).json({success:!1,error:"Failed to generate agency disclosure preview"})}}),i.post("/api/properties/:id/generate-agency-disclosure",n,async(r,t)=>{var e;try{let a=parseInt(r.params.id),{buyerName1:o,buyerSignature1:l,buyerSignatureDate1:c,agentSignature:p,agentSignatureDate:h,propertyAddress:w,propertyCity:y,propertyState:b,propertyZip:A,agentName:v,agentBrokerageName:S,agentLicenseNumber:R,isLeasehold:_,viewingRequestId:x}=r.body;if(!a||!l&&!p||!c&&!h)return t.status(400).json({success:!1,error:"Missing required fields - either buyer or agent must sign the form"});let B=await d.getProperty(a);if(!B)return t.status(404).json({success:!1,error:"Property not found"});let k={buyerName1:o,buyerSignature1:l,buyerSignatureDate1:c,agentSignature:p,agentSignatureDate:h,propertyAddress:w||B.address,propertyCity:y||B.city,propertyState:b||B.state,propertyZip:A||B.zip,agentName:v,agentBrokerageName:S,agentLicenseNumber:R,isLeasehold:_||!1,isEditable:r.query.editable==="true"},F=await ae(k);l&&(F=await W(F,l,"buyer1")),p&&(F=await W(F,p,"agent"));let M=Date.now(),L=`agency_disclosure_${a}_${M}.pdf`,G=j.join(process.cwd(),"uploads","agreements",L);await U.promises.mkdir(j.join(process.cwd(),"uploads","agreements"),{recursive:!0}),await U.promises.writeFile(G,F);let _e=(e=r.user)==null?void 0:e.id;if(!_e)return t.status(401).json({success:!1,error:"User not authenticated"});let Z;if(x){let V=await d.getViewingRequest(parseInt(x));if(V&&V.buyerAgentId)Z=V.buyerAgentId;else{let oe=await d.getUsersByRole("agent");if(oe.length>0)Z=oe[0].id,console.log(`No agent found in viewing request, using agent ID ${Z}`);else{let Le=await d.getUserByEmail("admin@realestateapp.com");if(!Le)return t.status(500).json({error:"No agent or admin found in the system"});Z=Le.id,console.log(`No agents found, using admin ID ${Z} as fallback`)}}}else{let V=await d.getUsersByRole("agent");if(V.length>0)Z=V[0].id,console.log(`No viewing request provided, using agent ID ${Z}`);else{let oe=await d.getUserByEmail("admin@realestateapp.com");if(!oe)return t.status(500).json({error:"No agent or admin found in the system"});Z=oe.id,console.log(`No agents found, using admin ID ${Z} as fallback`)}}let Ne=(await d.getAgreementsByProperty(a)).filter(V=>V.type==="agency_disclosure"&&!V.sellerSignature),de,ne={documentUrl:`/uploads/agreements/${L}`,status:"pending"};if(l&&(ne.buyerSignature=l),p&&(ne.agentSignature=p),Ne.length>0){let V=Ne[Ne.length-1];!ne.buyerSignature&&V.buyerSignature&&(ne.buyerSignature=V.buyerSignature),!ne.agentSignature&&V.agentSignature&&(ne.agentSignature=V.agentSignature),de=await d.updateAgreement(V.id,{...ne,agentId:Z}),console.log(`Updated existing agreement ${V.id} with signatures`)}else de=await d.createAgreement({propertyId:a,type:"agency_disclosure",agreementText:`California Agency Disclosure Form for property ${B.address}`,buyerId:_e,agentId:Z,...ne,date:new Date}),console.log(`Created new agreement ${de.id} with signatures`);if(x){let V=parseInt(x),oe=await d.getViewingRequest(V);oe&&(oe.status==="completed"&&await d.updateViewingRequest(V,{status:"pending"}),await d.createPropertyActivityLog({propertyId:a,userId:_e,activity:"agency_disclosure_signed_by_agent",details:{viewingRequestId:x,agreementId:de.id,agreementType:"agency_disclosure",message:"Agent has signed the disclosure form. Awaiting seller review."}}),B.sellerId&&g.broadcastToUsers([B.sellerId],{type:"notification",data:{message:"The agent has signed the Agency Disclosure form. Please review.",propertyId:a,agreementId:de.id}}))}t.json({success:!0,data:de})}catch(a){console.error("Error generating agency disclosure form:",a),t.status(500).json({success:!1,error:"Failed to generate agency disclosure form"})}}),i.post("/api/properties/:id/agency-disclosure",n,async(r,t)=>{var e,a,o;try{let l=parseInt(r.params.id),c=await d.getPropertyWithParticipants(l);if(!c)return t.status(404).json({success:!1,error:"Property not found"});let p=r.user.id,h=r.user.role;if(!(h==="admin"||h==="buyer"&&c.createdBy===p||h==="agent"&&c.agentId===p||h==="seller"&&c.sellerId===p))return t.status(403).json({success:!1,error:"You don't have permission to create or sign agency disclosure forms for this property"});let y=r.body;if(h==="buyer"){if(!y.buyerSignature)return t.status(400).json({success:!1,error:"Buyer signature is required"});try{let b=null;c.agentId&&(b=await d.getUser(c.agentId));let A={buyerName1:`${r.user.firstName||""} ${r.user.lastName||""}`.trim()||r.user.email,buyerSignature1:y.buyerSignature,buyerSignatureDate1:new Date().toISOString().split("T")[0],propertyAddress:c.address,propertyCity:c.city||"",propertyState:c.state||"",propertyZip:c.zip||"",agentName:b?`${b.firstName||""} ${b.lastName||""}`.trim()||b.email:"",agentBrokerageName:"Coldwell Banker Grass Roots Realty",agentLicenseNumber:"2244751",isEditable:y.isEditable===!0},v=await ae(A);y.buyerSignature&&(v=await W(v,y.buyerSignature,"buyer1"));let S=Date.now(),R=`agency_disclosure_${l}_${S}.pdf`,_=j.join(Ee,R);U.writeFileSync(_,v);let x=`/uploads/pdf/${R}`;await d.createPropertyActivityLog({propertyId:l,userId:p,activity:"Agency disclosure form signed by buyer",details:{buyerId:p,date:new Date().toISOString(),pdfUrl:x}}),c.agentId&&g.broadcastToUsers([c.agentId],{type:"notification",data:{message:"The buyer has signed the Agency Disclosure form.",propertyId:l,pdfUrl:x}});let B,F=(await d.getAgreementsByProperty(l)).find(M=>M.type==="agency_disclosure"&&(M.status==="draft"||M.status==="pending_buyer"));if(F)B=await d.updateAgreement(F.id,{buyerSignature:y.buyerSignature,status:"signed_by_buyer",documentUrl:x});else{let M;if(c.agentId)M=c.agentId;else{let L=await d.getUsersByRole("agent");if(L.length>0)M=L[0].id,console.log(`No agent assigned to property, using agent ID ${M}`);else{let G=await d.getUserByEmail("admin@realestateapp.com");if(!G)throw new Error("No agent or admin found in the system");M=G.id,console.log(`No agents found, using admin ID ${M} as fallback`)}}B=await d.createAgreement({propertyId:l,agentId:M,buyerId:p,type:"agency_disclosure",agreementText:`Agency Disclosure for ${c.address}`,buyerSignature:y.buyerSignature,date:new Date,status:"signed_by_buyer",documentUrl:x})}return c.sellerId&&g.broadcastToUsers([c.sellerId],{type:"notification",data:{message:"The buyer has signed the Agency Disclosure form. Please review and sign.",propertyId:l,agreementId:B.id,pdfUrl:x}}),t.status(200).json({success:!0,data:{message:"Form signed successfully",fileUrl:x,agreementId:B.id}})}catch(b){return console.error("Error generating PDF:",b),t.status(500).json({success:!1,error:"Failed to generate PDF form"})}}else if(h==="agent"){if(!y.agentSignature)return t.status(400).json({success:!1,error:"Agent signature is required"});try{let b={buyerName1:(e=c.buyer)!=null&&e.firstName&&((a=c.buyer)!=null&&a.lastName)?`${c.buyer.firstName} ${c.buyer.lastName}`:((o=c.buyer)==null?void 0:o.email)||"",agentName:`${r.user.firstName||""} ${r.user.lastName||""}`.trim()||r.user.email,agentBrokerageName:"Coldwell Banker Grass Roots Realty",agentLicenseNumber:"2244751",agentSignature:y.agentSignature,agentSignatureDate:new Date().toISOString().split("T")[0],propertyAddress:c.address,propertyCity:c.city||"",propertyState:c.state||"",propertyZip:c.zip||"",isEditable:y.isEditable===!0},A=await ae(b);y.agentSignature&&(A=await W(A,y.agentSignature,"agent"));let v=Date.now(),S=`agency_disclosure_${l}_${v}.pdf`,R=j.join(Ee,S);U.writeFileSync(R,A);let _=`/uploads/pdf/${S}`;return await d.createPropertyActivityLog({propertyId:l,userId:p,activity:"Agency disclosure form prepared by agent",details:{agentId:p,date:new Date().toISOString(),pdfUrl:_}}),c.createdBy&&g.broadcastToUsers([c.createdBy],{type:"notification",data:{message:"Your agent has prepared the Agency Disclosure form for your signature.",propertyId:l}}),t.status(200).json({success:!0,data:{message:"Form created successfully",pdfUrl:_}})}catch(b){return console.error("Error generating PDF:",b),t.status(500).json({success:!1,error:"Failed to generate PDF form"})}}else if(h==="seller"){if(!y.sellerSignature)return t.status(400).json({success:!1,error:"Seller signature is required"});if(c.sellerId!==p)return t.status(403).json({success:!1,error:"You are not authorized to sign this form as the seller"});try{let A=(await d.getAgreementsByProperty(l)).find(G=>G.type==="agency_disclosure"&&G.status==="signed_by_buyer"&&G.buyerSignature);if(!A)return t.status(400).json({success:!1,error:"No buyer-signed agreement found. The buyer must sign first."});let v=null;c.agentId&&(v=await d.getUser(c.agentId));let S=null;A.buyerId&&(S=await d.getUser(A.buyerId));let R={buyerName1:S?`${S.firstName||""} ${S.lastName||""}`.trim()||S.email:"",agentName:v?`${v.firstName||""} ${v.lastName||""}`.trim()||v.email:"",agentBrokerageName:"Coldwell Banker Grass Roots Realty",agentLicenseNumber:"2244751",propertyAddress:c.address,propertyCity:c.city||"",propertyState:c.state||"",propertyZip:c.zip||"",sellerName1:`${r.user.firstName||""} ${r.user.lastName||""}`.trim()||r.user.email,sellerSignature1:y.sellerSignature,sellerSignatureDate1:new Date().toISOString().split("T")[0],isEditable:y.isEditable===!0},_=A.documentUrl||"",x="";_&&_.startsWith("/uploads/")?x=j.join(process.cwd(),_.substring(1)):x=j.join(process.cwd(),"uploads","pdf","brbc.pdf");let B;try{B=U.readFileSync(x)}catch(G){console.error("Error reading PDF:",G),B=U.readFileSync(j.join(process.cwd(),"uploads","pdf","brbc.pdf"))}B=await ae(R),A.buyerSignature&&(B=await W(B,A.buyerSignature,"buyer1")),A.agentSignature&&(B=await W(B,A.agentSignature,"agent")),y.sellerSignature&&(B=await W(B,y.sellerSignature,"seller1"));let k=Date.now(),F=`agency_disclosure_${l}_${k}.pdf`,M=j.join(process.cwd(),"uploads","pdf",F);U.writeFileSync(M,B),_=`/uploads/pdf/${F}`,await d.updateAgreement(A.id,{sellerSignature:y.sellerSignature,status:"completed",documentUrl:_}),await d.createPropertyActivityLog({propertyId:l,userId:p,activity:"Agency disclosure form signed by seller",details:{sellerId:p,date:new Date().toISOString(),agreementId:A.id,pdfUrl:_}});let L=[];return S&&L.push(S.id),v&&L.push(v.id),L.length>0&&g.broadcastToUsers(L,{type:"notification",data:{message:"The seller has signed the Agency Disclosure form. The form is now complete.",propertyId:l,agreementId:A.id,pdfUrl:_}}),t.status(200).json({success:!0,data:{message:"Form signed by seller successfully",fileUrl:_,agreementId:A.id}})}catch(b){return console.error("Error processing seller signature:",b),t.status(500).json({success:!1,error:"Failed to process seller signature"})}}else return t.status(403).json({success:!1,error:"Only buyers, sellers, and agents can access this functionality"})}catch(l){console.error("Agency disclosure form error:",l),t.status(500).json({success:!1,error:l instanceof Error?l.message:"Failed to process agency disclosure form"})}}),i.post("/api/viewing-requests",n,u(["buyer"]),async(r,t)=>{try{console.log("Viewing request payload:",r.body);let e={...r.body,buyerId:r.user.id};if(console.log("Merged request data before validation:",e),!e.propertyId)return t.status(400).json({success:!1,error:"Property ID is required"});if(!e.requestedDate||!e.requestedEndDate)return t.status(400).json({success:!1,error:"Requested viewing dates are required"});let a={...e,requestedDate:new Date(e.requestedDate),requestedEndDate:new Date(e.requestedEndDate)};console.log("Processed request data:",a);let o=await d.getProperty(a.propertyId);if(console.log("Found property:",o),!o)return t.status(404).json({success:!1,error:"Property not found"});if(o.status!=="active"&&o.status!=="pending")return t.status(403).json({success:!1,error:"This property is not available for viewing requests"});if(!o.sellerId&&!o.agentId)return t.status(403).json({success:!1,error:"This property doesn't have a seller or agent assigned yet"});if(o.agentId,a.override){let y=(await d.getViewingRequestsByBuyer(r.user.id)).find(b=>b.propertyId===a.propertyId&&(b.status==="pending"||b.status==="approved"||b.status==="rescheduled"));y&&(await d.updateViewingRequest(y.id,{status:"canceled",notes:y.notes?`${y.notes} [Canceled and replaced with a new request]`:"[Canceled and replaced with a new request]"}),await d.createPropertyActivityLog({propertyId:a.propertyId,userId:r.user.id,activity:"Viewing request canceled and replaced",details:{oldRequestId:y.id,oldRequestDate:y.requestedDate}}))}let l={...a};o.agentId&&(l.buyerAgentId=o.agentId);let c=await d.createViewingRequest(l),p=await ye(c.id);try{await d.createPropertyActivityLog({propertyId:o.id,userId:r.user.id,activity:"Viewing requested",details:{requestId:c.id,requestedDate:c.requestedDate,requestedEndDate:c.requestedEndDate,agentId:o.agentId,publicViewingLink:p}})}catch(w){console.error("Failed to create activity log for viewing request:",w)}let h=[r.user.id];o.agentId&&(h.push(o.agentId),g.broadcastToUsers([o.agentId],{type:"notification",data:{message:"A buyer has requested a viewing. Please prepare the Real Estate Agency Disclosure form.",propertyId:o.id,viewingRequestId:c.id,requiresDisclosure:!0}})),c.sellerAgentId&&c.sellerAgentId!==o.agentId&&h.push(c.sellerAgentId),o.sellerId&&h.push(o.sellerId),g.broadcastToUsers(h,{type:"notification",data:{message:"A new viewing has been requested",propertyId:o.id,viewingRequestId:c.id,publicViewingLink:p}});try{let w=await d.getUser(r.user.id),y;o.agentId&&(y=await d.getUser(o.agentId));let b=o.listingAgentEmail||o.sellerEmail,A=o.listingAgentName||o.sellerName;if(console.log("------------------Listing agent email:",JSON.stringify(o)),w&&b){let v={...c,publicViewingLink:p};console.log("-------------publicViewingLink:"+p),await rt(v,o,w,y,b,A,p),console.log(`Sent tour request notification email with public link to: ${b}`)}else console.warn("Could not send tour request email - missing buyer or listing agent email")}catch(w){console.error("Failed to send tour request email notification:",w)}t.status(201).json({success:!0,data:{...c,publicViewingLink:p}})}catch(e){console.error("Create viewing request error:",e),t.status(400).json({success:!1,error:e instanceof Error?e.message:"Invalid data"})}}),i.get("/api/properties/:id/viewing-requests",n,async(r,t)=>{try{let e=parseInt(r.params.id);console.log(`Getting viewing requests for property ${e}`);let a=await d.getProperty(e);if(!a)return console.log(`Property ${e} not found`),t.status(404).json({success:!1,error:"Property not found"});let o=r.user.id,l=r.user.role;if(!(l==="admin"||l==="buyer"||l==="seller"&&a.sellerId===o||l==="agent"&&a.agentId===o))return console.log(`User ${o} with role ${l} does not have access to viewing requests for property ${e}`),t.status(403).json({success:!1,error:"You don't have access to viewing requests for this property"});let p=await d.getViewingRequestsByProperty(e);console.log(`Found ${p.length} viewing requests for property ${e}`,p);let h=await Promise.all(p.map(async w=>{let y;w.buyerId&&(y=await d.getUser(w.buyerId));let b;w.buyerAgentId&&(b=await d.getUser(w.buyerAgentId));let A=await ye(w.id);return{...w,buyer:y,agent:b,publicViewingLink:A}}));console.log("Processed viewing requests:",h),t.json(h)}catch(e){console.error("Get viewing requests error:",e),t.status(500).json({success:!1,error:"Failed to fetch viewing requests"})}}),i.get("/api/viewing-requests/buyer",n,u(["buyer"]),async(r,t)=>{try{let e=await d.getViewingRequestsByBuyer(r.user.id),a=await Promise.all(e.map(async o=>{let l=await d.getProperty(o.propertyId),c=o.buyerAgentId?await d.getUser(o.buyerAgentId):o.sellerAgentId?await d.getUser(o.sellerAgentId):void 0,p=await ye(o.id);return{...o,property:l,agent:c,publicViewingLink:p}}));t.json(a)}catch(e){console.error("Get buyer viewing requests error:",e),t.status(500).json({success:!1,error:"Failed to fetch viewing requests"})}}),i.get("/api/viewing-requests/agent",n,u(["agent"]),async(r,t)=>{try{let e=await d.getViewingRequestsByAgent(r.user.id),a=await d.getUser(r.user.id),o=await Promise.all(e.map(async l=>{let c=await d.getProperty(l.propertyId),p=l.buyerId?await d.getUser(l.buyerId):void 0,h=await ye(l.id);return{...l,property:c,buyer:p,agent:a,publicViewingLink:h}}));console.log("Enhanced agent viewing requests:",JSON.stringify(o,null,2).substring(0,500)+"..."),t.json(o)}catch(e){console.error("Get agent viewing requests error:",e),t.status(500).json({success:!1,error:"Failed to fetch viewing requests"})}}),i.get("/api/viewing-requests/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getViewingRequestWithParticipants(e);if(!a)return t.status(404).json({success:!1,error:"Viewing request not found"});let o=r.user.id,l=r.user.role,c=await d.getProperty(a.propertyId);if(!c)return t.status(404).json({success:!1,error:"Property not found"});if(!(l==="admin"||l==="buyer"&&a.buyerId===o||l==="seller"&&c.sellerId===o||l==="agent"&&(a.buyerAgentId===o||a.sellerAgentId===o||c.agentId===o)))return t.status(403).json({success:!1,error:"You don't have access to this viewing request"});t.json(a)}catch(e){console.error("Get viewing request error:",e),t.status(500).json({success:!1,error:"Failed to fetch viewing request"})}}),i.patch("/api/viewing-requests/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getViewingRequest(e);if(!a)return t.status(404).json({success:!1,error:"Viewing request not found"});let o=r.user.id,l=r.user.role,c=await d.getProperty(a.propertyId);if(!c)return t.status(404).json({success:!1,error:"Property not found"});let p=l==="agent"&&(a.buyerAgentId===o||a.sellerAgentId===o||c.agentId===o),h=l==="seller"&&c.sellerId===o,w=l==="buyer"&&a.buyerId===o;if(!(p||h||w||l==="admin"))return t.status(403).json({success:!1,error:"You don't have permission to update this viewing request"});let{status:b,confirmedDate:A,confirmedEndDate:v,responseMessage:S}=r.body;if(b&&!["pending","accepted","rejected","rescheduled","completed","cancelled"].includes(b))return t.status(400).json({success:!1,error:"Invalid status value"});let R={};b&&(R.status=b),A&&(R.confirmedDate=new Date(A)),v&&(R.confirmedEndDate=new Date(v)),S&&(R.responseMessage=S),["accepted","rescheduled"].includes(b)&&(R.confirmedById=o);let _=await d.updateViewingRequest(e,R);try{await d.createPropertyActivityLog({propertyId:c.id,userId:o,activity:`Viewing request ${b}`,details:{requestId:_.id,status:_.status,updatedBy:{id:o,role:l}}})}catch(B){console.error("Failed to create activity log for viewing request update:",B)}let x=[a.buyerId];a.buyerAgentId&&x.push(a.buyerAgentId),a.sellerAgentId&&x.push(a.sellerAgentId),c.sellerId&&x.push(c.sellerId),c.agentId&&x.push(c.agentId),g.broadcastToUsers(x,{type:"property_update",data:{propertyId:c.id,viewingRequestId:_.id,action:"viewing_request_updated",status:_.status,message:`Viewing request has been ${_.status}`}}),t.json({success:!0,data:_})}catch(e){console.error("Update viewing request error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to update viewing request"})}}),i.delete("/api/viewing-requests/:id",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getViewingRequest(e);if(!a)return t.status(404).json({success:!1,error:"Viewing request not found"});let o=r.user.id,l=r.user.role;if(!(l==="buyer"&&a.buyerId===o||l==="admin"))return t.status(403).json({success:!1,error:"You don't have permission to delete this viewing request"});let h=await d.updateViewingRequest(e,{status:"cancelled",updatedAt:new Date}),w=await d.getProperty(a.propertyId);if(!w)return t.status(404).json({success:!1,error:"Property not found"});try{await d.createPropertyActivityLog({propertyId:w.id,userId:o,activity:"Viewing request cancelled",details:{requestId:a.id,cancelledBy:{id:o,role:l}}})}catch(b){console.error("Failed to create activity log for viewing request deletion:",b)}let y=[];a.buyerAgentId&&y.push(a.buyerAgentId),a.sellerAgentId&&y.push(a.sellerAgentId),w.sellerId&&y.push(w.sellerId),w.agentId&&y.push(w.agentId),y.length>0&&g.broadcastToUsers(y,{type:"property_update",data:{propertyId:w.id,viewingRequestId:a.id,action:"viewing_request_cancelled",status:"cancelled",message:`Viewing request #${a.id} has been cancelled by the buyer`}}),t.json({success:!0,message:"Viewing request cancelled successfully"})}catch(e){console.error("Delete viewing request error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to delete viewing request"})}}),i.get("/api/agreements/agent-referral",n,u(["agent"]),async(r,t)=>{try{let a=(await d.getAgreementsByAgent(r.user.id)).filter(o=>o.type==="agent_referral");if(a.length>0){let o=a[a.length-1];return t.json({success:!0,data:{id:o.id,status:o.status,documentUrl:o.documentUrl,date:o.date}})}return t.json({success:!0,data:null})}catch(e){console.error("Error fetching agent referral agreement:",e),t.status(500).json({success:!1,error:"Failed to retrieve agent referral agreement"})}}),i.get("/api/agreements/agent-referral/pdf",n,u(["agent"]),async(r,t)=>{try{let e=await d.getUser(r.user.id);if(!e)return t.status(404).json({success:!1,error:"Agent not found"});let a={agentName:`${e.firstName||""} ${e.lastName||""}`.trim()||e.email,licenseNumber:e.licenseNumber||"",address:e.addressLine1||"",city:e.city||"",state:e.state||"",zip:e.zip||"",date:new Date().toISOString().split("T")[0],isEditable:!0,brokerageName:e.brokerageName||"",phoneNumber:e.phone||"",email:e.email||""},o=await ve(a);t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",'inline; filename="agent_referral_agreement.pdf"'),t.send(o)}catch(e){console.error("Error generating agent referral agreement PDF:",e),t.status(500).json({success:!1,error:"Failed to generate agent referral agreement PDF"})}}),i.post("/api/agreements/agent-referral/preview",n,u(["agent"]),async(r,t)=>{try{let{agentName:e,licenseNumber:a,address:o,city:l,state:c,zip:p,signature:h,date:w,brokerageName:y,phoneNumber:b,email:A}=r.body;if(!h)return t.status(400).json({success:!1,error:"Agent signature is required"});let v=await d.getUser(r.user.id),S={agentName:e||`${v.firstName||""} ${v.lastName||""}`.trim()||v.email,licenseNumber:a||(v==null?void 0:v.licenseNumber)||"",address:o||(v==null?void 0:v.addressLine1)||"",city:l||(v==null?void 0:v.city)||"",state:c||(v==null?void 0:v.state)||"",zip:p||(v==null?void 0:v.zip)||"",agentSignature:h,date:w||new Date().toISOString().split("T")[0],isEditable:!1,brokerageName:y||(v==null?void 0:v.brokerageName)||"",phoneNumber:b||(v==null?void 0:v.phone)||"",email:A||(v==null?void 0:v.email)||""},R=await ve(S),_=await W(R,h,"agent");t.setHeader("Content-Type","application/pdf"),t.setHeader("Content-Disposition",'inline; filename="agent_referral_agreement_preview.pdf"'),t.send(_)}catch(e){console.error("Error generating preview for agent referral agreement:",e),t.status(500).json({success:!1,error:"Failed to generate preview for agent referral agreement"})}}),i.post("/api/agreements/agent-referral",n,u(["agent"]),async(r,t)=>{try{let{signature:e,date:a}=r.body;if(!e)return t.status(400).json({success:!1,error:"Agent signature is required"});let o=await d.getUser(r.user.id);if(!o)return t.status(404).json({success:!1,error:"Agent not found"});let c=(await d.getAgreementsByAgent(r.user.id)).filter(x=>x.type==="agent_referral");if(c.length>0){let x=c[c.length-1];return t.json({success:!0,data:{id:x.id,status:x.status,documentUrl:x.documentUrl,date:x.date}})}let p={agentName:`${o.firstName||""} ${o.lastName||""}`.trim()||o.email,licenseNumber:o.licenseNumber||"",address:o.addressLine1||"",city:o.city||"",state:o.state||"",zip:o.zip||"",agentSignature:e,date:a||new Date().toISOString().split("T")[0],isEditable:!1,brokerageName:o.brokerageName||"",phoneNumber:o.phone||"",email:o.email||""},h=await ve(p),w=await W(h,e,"agent"),y=Date.now(),b=`agent_referral_${r.user.id}_${y}.pdf`;await U.promises.mkdir(j.join(process.cwd(),"uploads","agreements"),{recursive:!0});let A=j.join(process.cwd(),"uploads","agreements",b);await U.promises.writeFile(A,w);let v=`/uploads/agreements/${b}`,S=0,R=0;try{let x=await d.getUsersByRole("admin");x.length>0&&(R=x[0].id)}catch{console.warn("Could not find admin user, using 0 as buyerId placeholder")}let _=await d.createAgreement({propertyId:S,agentId:r.user.id,buyerId:R,type:"agent_referral",agreementText:"Agent Referral Fee Agreement (25% to Randy Brummett)",agentSignature:e,date:new Date,status:"completed",documentUrl:v});t.json({success:!0,data:{id:_.id,status:_.status,documentUrl:v,date:_.date}})}catch(e){console.error("Error creating agent referral agreement:",e),t.status(500).json({success:!1,error:"Failed to create agent referral agreement"})}}),i.patch("/api/properties/:id/agent-email",n,async(r,t)=>{try{let e=parseInt(r.params.id),a=await d.getProperty(e),o=r.user.id,l=r.user.role,{agentEmail:c}=r.body;if(!a)return t.status(404).json({success:!1,error:"Property not found"});if(!c||!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(c))return t.status(400).json({success:!1,error:"Please provide a valid email address"});let p=l==="seller"&&a.sellerId===o,h=l==="agent"&&a.agentId===o,w=l==="buyer"&&a.createdBy===o;if(!(p||h||w||l==="admin"))return t.status(403).json({success:!1,error:"You don't have permission to update this property's agent email"});let b=await d.updateProperty(e,{sellerEmail:c});await d.createPropertyActivityLog({propertyId:e,userId:o,activity:"Agent email updated",details:{previousEmail:a.sellerEmail,newEmail:c,updatedBy:{id:o,role:l}}});let A=[];a.sellerId&&a.sellerId!==o&&A.push(a.sellerId),a.agentId&&a.agentId!==o&&A.push(a.agentId),a.createdBy&&a.createdBy!==o&&A.push(a.createdBy),A.length>0&&g.broadcastToUsers(A,{type:"property_update",data:{propertyId:e,message:`The agent email for ${a.address} has been updated.`}}),t.json({success:!0,data:b})}catch(e){t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to update agent email"})}}),i.get("/api/buyer/agreements",n,u(["buyer"]),async(r,t)=>{var e;try{let a=(e=r.user)==null?void 0:e.id;if(!a)return t.status(401).json({success:!1,error:"Unauthorized"});let o=await d.getAgreementsByBuyer(a);t.json(o)}catch(a){console.error("Error getting buyer agreements:",a),t.status(500).json({success:!1,error:"Failed to get buyer agreements"})}}),i.post("/api/global-brbc",n,async(r,t)=>{console.log("-----Global BRBC request body:");try{let{agentId:e,signatureData:a,details:o}=r.body;if(!r.user)return t.status(401).json({success:!1,error:"Unauthorized"});let l=r.user.id,c=await d.getGlobalBRBCForBuyerAgent(l,e);if(c&&c.status==="completed")return t.status(400).json({success:!1,error:"A global BRBC agreement already exists between this buyer and agent",agreementId:c.id});if(!await d.getUser(e))return t.status(404).json({success:!1,error:"Agent not found"});let h=await d.createAgreement({agentId:e,buyerId:l,type:"global_brbc",agreementText:JSON.stringify(o||{}),buyerSignature:a,date:new Date,status:"signed_by_buyer",isGlobal:!0});t.json({success:!0,data:h})}catch(e){console.error("Error creating global BRBC agreement:",e),t.status(500).json({success:!1,error:"Failed to create global BRBC agreement"})}}),i.post("/api/global-brbc/pdf-signature",n,u(["buyer"]),async(r,t)=>{console.log("-----Pdf-signature request body:");try{let{signatureData:e,initialsData:a,buyer2SignatureData:o,buyer2InitialsData:l,previewOnly:c,formFieldValues:p,details:h}=r.body;if(!r.user)return t.status(401).json({success:!1,error:"Unauthorized"});let w=r.user.id,y;if(!c){let L=await d.getUsersByRole("agent");if(!L||L.length===0)return t.status(404).json({success:!1,error:"No agents available in the system"});y=L[0]}let b=`${r.user.firstName||""} ${r.user.lastName||""}`.trim()||r.user.email,A=(h==null?void 0:h.buyer1)||(p==null?void 0:p.buyer1)||b,v={buyer2:(h==null?void 0:h.buyer2)||(p==null?void 0:p.buyer2),startDate:(h==null?void 0:h.startDate)||(p==null?void 0:p.today),endDate:(h==null?void 0:h.endDate)||(p==null?void 0:p["3Months"]),startDate2:(h==null?void 0:h.startDate2)||(p==null?void 0:p.today2),endDate2:(h==null?void 0:h.endDate2)||(p==null?void 0:p["3Months2"]),formFieldValues:p},S=await De(A,v);try{console.log(`Adding signatures to PDF: primary=${!!e}, initials=${!!a}, buyer2=${!!o}, buyer2Initials=${!!l}`),e&&(S=await W(S,e,"sign1")),a&&(S=await W(S,a,"initial1")),o&&(S=await W(S,o,"sign2")),l&&(S=await W(S,l,"initial2"))}catch(L){console.error("Error adding signature to PDF:",L)}let R=j.join(process.cwd(),"uploads","agreements");await U.promises.mkdir(R,{recursive:!0});let _=Date.now(),B=`${c?"preview_brbc":"brbc"}_${w}_${_}.pdf`,k=j.join(R,B);await U.promises.writeFile(k,S);let F=`/uploads/agreements/${B}`;if(c)return t.json({success:!0,data:{pdfUrl:F,preview:!0}});let M=await d.createAgreement({agentId:y.id,buyerId:w,type:"global_brbc",agreementText:JSON.stringify(h||{}),buyerSignature:e,date:new Date,status:"signed_by_buyer",isGlobal:!0,documentUrl:F});try{let L=await d.getUser(w);if(console.log("--------Lets send brbc to buyer: Buyer data:",L),L){console.log("--------Lets send brbc to buyer: Buyer exists:",L);let G=y?await d.getUser(y.id):void 0;await tt(L,F,G),console.log(`Sent signed BRBC document to buyer ${L.email}`)}else console.error(`Could not find buyer with ID ${w} to send BRBC email`)}catch(L){console.error("Error sending BRBC email to buyer:",L)}t.json({success:!0,data:M})}catch(e){console.error("Error creating BRBC agreement with PDF:",e),t.status(500).json({success:!1,error:"Failed to create BRBC agreement"})}}),i.get("/api/global-brbc/:agentId",n,async(r,t)=>{try{let e=parseInt(r.params.agentId);if(!r.user)return t.status(401).json({success:!1,error:"Unauthorized"});let a=r.user.id,o=await d.getGlobalBRBCForBuyerAgent(a,e);if(o&&(o.status==="completed"||o.status==="signed_by_buyer"))return t.json({success:!0,exists:!0,agreement:o});t.json({success:!0,exists:!1})}catch(e){console.error("Error checking global BRBC agreement:",e),t.status(500).json({success:!1,error:"Failed to check global BRBC agreement"})}}),i.get("/api/public/viewing/:token",async(r,t)=>{try{let{token:e}=r.params;if(!e)return t.status(400).json({success:!1,error:"Missing token"});let a=await he(e);if(!a)return t.status(404).json({success:!1,error:"Invalid or expired token"});let{viewingRequest:o,property:l,buyer:c,agent:p}=a,h=c?`${c.firstName||""} ${c.lastName||""}`.trim()||c.email:"Unknown Buyer",w=p?`${p.firstName||""} ${p.lastName||""}`.trim()||p.email:void 0,y={success:!0,viewingRequest:{...o,buyer:c,agent:p},property:l,buyerName:h,agentName:w};t.json(y)}catch(e){console.error("Error accessing public viewing:",e),t.status(500).json({success:!1,error:"Failed to retrieve viewing request"})}}),i.patch("/api/public/viewing/:token",async(r,t)=>{try{let{token:e}=r.params,{status:a,confirmedDate:o,confirmedEndDate:l,responseMessage:c}=r.body;if(!e)return t.status(400).json({success:!1,error:"Missing token"});let p=await he(e);if(!p)return t.status(404).json({success:!1,error:"Invalid or expired token"});let{viewingRequest:h,property:w}=p;if(a&&!["pending","accepted","rejected","rescheduled","completed","cancelled"].includes(a))return t.status(400).json({success:!1,error:"Invalid status value"});let y={};a&&(y.status=a),o&&(y.confirmedDate=new Date(o)),l&&(y.confirmedEndDate=new Date(l)),c&&(y.responseMessage=c),["accepted","rescheduled"].includes(a)&&(y.confirmedById=w.agentId||w.sellerId||null);let b=await d.updateViewingRequest(h.id,y);try{await d.createPropertyActivityLog({propertyId:w.id,userId:w.agentId||w.sellerId||null,activity:`Viewing request ${a} via public link`,details:{requestId:b.id,status:b.status,updatedVia:"public_link"}})}catch(v){console.error("Failed to create activity log for public viewing request update:",v)}let A=[h.buyerId];h.buyerAgentId&&A.push(h.buyerAgentId),h.sellerAgentId&&A.push(h.sellerAgentId),w.sellerId&&A.push(w.sellerId),w.agentId&&A.push(w.agentId),g.broadcastToUsers(A,{type:"property_update",data:{propertyId:w.id,viewingRequestId:b.id,action:"viewing_request_updated",status:b.status,message:`Viewing request has been ${b.status} by listing agent via public link`}}),t.json({success:!0,data:b})}catch(e){console.error("Update public viewing request error:",e),t.status(500).json({success:!1,error:e instanceof Error?e.message:"Failed to update viewing request"})}}),s}import Ar from"express";import St from"fs";import $e from"path";import{createServer as vr,createLogger as Er}from"vite";import{defineConfig as wr}from"vite";import br from"@vitejs/plugin-react";import Ir from"@replit/vite-plugin-shadcn-theme-json";import be from"path";import Pr from"@replit/vite-plugin-runtime-error-modal";var vt=wr({plugins:[br(),Pr(),Ir(),...process.env.NODE_ENV!=="production"&&process.env.REPL_ID!==void 0?[await import("@replit/vite-plugin-cartographer").then(i=>i.cartographer())]:[]],resolve:{alias:{"@":be.resolve(import.meta.dirname,"client","src"),"@shared":be.resolve(import.meta.dirname,"shared"),"@assets":be.resolve(import.meta.dirname,"attached_assets")}},root:be.resolve(import.meta.dirname,"client"),build:{outDir:be.resolve(import.meta.dirname,"dist/public"),emptyOutDir:!0}});import{nanoid as Sr}from"nanoid";var Et=Er();function je(i,s="express"){let n=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${n} [${s}] ${i}`)}async function _t(i,s){let n={middlewareMode:!0,hmr:{server:s},allowedHosts:!0},u=await vr({...vt,configFile:!1,customLogger:{...Et,error:(g,f)=>{Et.error(g,f),process.exit(1)}},server:n,appType:"custom"});i.use(u.middlewares),i.use("*",async(g,f,m)=>{let P=g.originalUrl;try{let r=$e.resolve(import.meta.dirname,"..","client","index.html"),t=await St.promises.readFile(r,"utf-8");t=t.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${Sr()}"`);let e=await u.transformIndexHtml(P,t);f.status(200).set({"Content-Type":"text/html"}).end(e)}catch(r){u.ssrFixStacktrace(r),m(r)}})}function Nt(i){let s=$e.resolve(import.meta.dirname,"public");if(!St.existsSync(s))throw new Error(`Could not find the build directory: ${s}, make sure to build the client first`);i.use(Ar.static(s)),i.use("*",(n,u)=>{u.sendFile($e.resolve(s,"index.html"))})}var le=Fe();le.use(Fe.json({limit:"50mb"}));le.use(Fe.urlencoded({extended:!1,limit:"50mb"}));le.use((i,s,n)=>{let u=Date.now(),g=i.path,f,m=s.json;s.json=function(P,...r){return f=P,m.apply(s,[P,...r])},s.on("finish",()=>{let P=Date.now()-u;if(g.startsWith("/api")){let r=`${i.method} ${g} ${s.statusCode} in ${P}ms`;f&&(r+=` :: ${JSON.stringify(f)}`),r.length>80&&(r=r.slice(0,79)+"\u2026"),je(r)}}),n()});(async()=>{let i=await At(le);le.use((n,u,g,f)=>{let m=n.status||n.statusCode||500,P=n.message||"Internal Server Error";throw g.status(m).json({message:P}),n}),le.get("env")==="development"?await _t(le,i):Nt(le);let s=5e3;i.listen({port:s,host:"0.0.0.0",reusePort:!0},()=>{je(`serving on port ${s}`)})})();
